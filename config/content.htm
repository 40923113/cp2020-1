<h1>About</h1>
<p>這裡是國立虎尾科技大學機械設計工程系大一的計算機程式課程網頁.</p>
<p>CP2020 將在 <a href="https://kaggle.com">https://kaggle.com</a>, <a href="https://colab.research.google.com">https://colab.research.google.com</a> 以及可攜程式系統上進行.</p>
<p>以下是 CP2020 課程進行流程:</p>
<p style="padding-left: 30px;">W1 學員登入學校配發的 @gm 郵件帳號後, <a href="https://forms.gle/3hfnf6D2QCemdDQn9">填寫基本資料</a></p>
<p style="padding-left: 30px;">W1 告知將利用 <a href="https://gitter.im/">Gitter</a> 進行課程議題討論</p>
<p style="padding-left: 30px;">W1 就電腦軟硬體與網路環境的使用進行介紹</p>
<p style="padding-left: 30px;">W2 學員建立 <a href="https://github.com/">Github</a>, <a href="https://gitlab.com">Gitlab,</a> <a href="https://www.heroku.com/">Heroku</a> 與 <a href="https://www.authorea.com/">Authorea</a> 帳號</p>
<p style="padding-left: 30px;">Ｗ2 學員利用 Github Pages 與 CMSiMDE 建立個人網頁</p>
<p style="padding-left: 30px;">W2 學員學習如何利用 Git 與 Github 維護個人網頁</p>
<p style="padding-left: 30px;">Ｗ3 統整 W1 與 W2 教材內容至各學員個人網頁</p>
<p style="padding-left: 30px;">Ｗ3 完成亂數分組,  每班分成四組</p>
<p style="padding-left: 30px;">W4 - W9 Python 基本語法與功能</p>
<p style="padding-left: 30px;">Ｗ10 - W14 分組 Python 專案</p>
<p style="padding-left: 30px;">Ｗ15 - W18 分組總結報告</p>
<h4>電腦輔助設計室與協同設計室行事曆</h4>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p>
<h2>評分</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
根據評分表單中的 自評分數, 互評得分, 教師評分, 計算學員課程成績
'''
 
def diff(分數1, 分數2):
    return abs(分數1 - 分數2)
     
def getHigh(分數1, 分數2):
    if  分數1 &gt; 分數2:
        return 分數1
    else:
        return 分數2

def getLow(分數1, 分數2):
    if  分數1 &lt; 分數2:
        return 分數1
    else:
        return 分數2
 
def 分組評分(自評分數, 教師評分):
    return getLow(自評分數, 教師評分)
    if diff(自評分數, 教師評分) &gt; 5:
        return getLow(自評分數, 教師評分)
    else:
        return int(自評分數*0.4 + 教師評分*0.6)
     
def 全班比分(互評得分, 分組評分):
    if diff(互評得分, 分組評分) &lt; 5:
        學員成績 = getHigh(互評得分, 分組評分)
    else:
        學員成績 = int(互評得分*0.4 + 分組評分*0.6)
    return 學員成績
 
def 學員成績(自評分數, 互評得分, 教師評分):
    學員課程成績 = 全班比分(互評得分, 分組評分(自評分數, 教師評分))
    return 學員課程成績
    
for i in range(10):
    self_score = 50 + i*5
    for j in range(10):
        peer_score = 50 + j*5
        for k in range(10):
            teacher_score = 50 + k*5
            print(self_score, peer_score, teacher_score, "=", 學員成績(self_score, peer_score, teacher_score))</pre>
<h2>討論區</h2>
<p><a href="https://gitter.im/mdecourse/cp2020">https://gitter.im/mdecourse/cp2020</a></p>
<h1>Computer</h1>
<p><a href="https://oli.cmu.edu/product-category/computer-science-programming-indep/">https://oli.cmu.edu/product-category/computer-science-programming-indep/</a> </p>
<p><img alt="" class="add_border" height="778" src="/images/oli_cmu_computer_courses.png" width="800"/></p>
<p>個人電腦軟硬體簡介</p>
<p>軟體</p>
<p>電腦操作系統</p>
<p style="padding-left: 30px;">Windows</p>
<p style="padding-left: 30px;">Linux</p>
<p style="padding-left: 30px;">Mac OS</p>
<p>分散式版次管理系統</p>
<p style="padding-left: 30px;">近端</p>
<p style="padding-left: 30px;">遠端</p>
<p>網際內容管理 (Github 與 Heroku)</p>
<p style="padding-left: 30px;">CMSiMDE</p>
<p style="padding-left: 60px;">Pelican</p>
<p style="padding-left: 60px;">Reveal.js</p>
<p style="padding-left: 30px;">將包含 html 與 Javascript 的靜態網頁資料以 Github Pages, Gitlab Pages 或 Heroku 伺服</p>
<p style="padding-left: 30px;">Python 網際程式透過 Flask 則可以部署到 <a href="https://www.heroku.com/">Heroku</a> 雲端主機</p><h2>PC Hardware</h2>
<p><a href="https://oli.cmu.edu/courses/pc-hardware-open-free/">https://oli.cmu.edu/courses/pc-hardware-open-free/</a> </p>
<h2>PC Software</h2>
<p><a href="https://oli.cmu.edu/courses/pc-software-open-free/">https://oli.cmu.edu/courses/pc-software-open-free/</a> </p>
<h2>Logics and Proofs</h2>
<p><a href="https://oli.cmu.edu/courses/logic-proofs-copy/">https://oli.cmu.edu/courses/logic-proofs-copy/</a></p><h2>Media Programming</h2>
<p><a href="https://oli.cmu.edu/courses/media-programming-copy/">https://oli.cmu.edu/courses/media-programming-copy/</a> </p><h1>Network</h1>
<p>電腦網路系統與設定簡介</p>
<p><img alt="" class="add_border" height="558" src="/images/routing_network_diagram.png" width="800"/></p>
<p>校內網路設定</p>
<p style="padding-left: 30px;">系網路</p>
<p style="padding-left: 30px;">IPv4 與 IPv6</p>
<p style="padding-left: 30px;">代理主機</p>
<p>校外網路設定</p>
<p style="padding-left: 30px;">VPN</p>
<p style="padding-left: 60px;">下載安裝校方提供軟體</p>
<p style="padding-left: 90px;">每半年認證一次</p>
<p style="padding-left: 60px;">下載校方購買的電子書與期刊</p>
<p style="padding-left: 60px;"></p><h1>Python</h1>
<p>Principles of Computation with Python:</p>
<p style="padding-left: 30px;"><a href="https://oli.cmu.edu/courses/principles-of-computation-with-python-open-free/">https://oli.cmu.edu/courses/principles-of-computation-with-python-open-free/</a></p>
<p><img alt="" class="add_border" height="891" src="/images/intro_programming_with_python.png" width="600"/></p>
<p>請利用學校所配發的 @gm 電子郵件帳號登入 <a href="https://kaggle.com">https://kaggle.com</a>, 並且連結至 <a href="https://www.kaggle.com/learn/python">https://www.kaggle.com/learn/python</a> 就可以開始 在 <a href="https://www.kaggle.com/notebooks">https://www.kaggle.com/notebooks</a> 網際環境中學習 Python 程式語言.</p>
<p>例如:</p>
<p style="padding-left: 30px;"><a href="https://www.kaggle.com/kevinelong/introduction-to-computer-programming-review/execution">https://www.kaggle.com/kevinelong/introduction-to-computer-programming-review/execution</a></p>
<p style="padding-left: 30px;"><a href="https://www.kaggle.com/mdecourse/cp2020">https://www.kaggle.com/mdecourse/cp2020</a></p>
<p style="padding-left: 30px;"><a href="https://www.kaggle.com/abinesh100/easy-download-images-in-25-lines-py3">https://www.kaggle.com/abinesh100/easy-download-images-in-25-lines-py3</a></p>
<p>除了 <a href="https://kaggle.com">https://kaggle.com</a> 與 <a href="https://colab.research.google.com">https://colab.research.google.com</a> 執行並學習 Python 外, 本課程將要求學員在 <a href="https://pages.github.com/">Github Pages</a> 與 <a href="https://docs.gitlab.com/ee/user/project/pages/">Gitlab Pages</a> 中建立個人靜態網頁, 並將網際動態 Python 系統部署在 <a href="https://www.heroku.com/">Heroku,</a> 分組協同報告則利用 <a href="https://www.authorea.com/">Authorea</a> 編輯發布.</p>
<p>其他學習 Python 的方式:</p>
<ol>
<li>直接在操作系統中安裝 Python 解譯器與編輯器</li>
<li>利用可攜程式系統中的 Python 解譯器與編輯器</li>
<li>直接在網際環境中搭建 Brython 程式環境</li>
<li>直接在網際環境中搭建 Jupyter Notebook 程式環境</li>
</ol>
<p>不同程式環境中的組態設定與功能差異</p>
<p>其他參考教材:</p>
<p style="padding-left: 30px;"><a href="https://www.py4e.com/">https://www.py4e.com/</a></p>
<p style="padding-left: 30px;"><a href="https://automatetheboringstuff.com/">https://automatetheboringstuff.com/</a></p><h2>工作流程</h2>
<p>建立 CP 2020 課程網頁</p>
<ol>
<li style="padding-left: 30px;">以 mdecourse 帳號登入 github.com</li>
<li style="padding-left: 30px;">建立 cp2020 空倉儲, 選擇由系統建立 README.md (延伸題目: 假如不新 README.md, 則又該如何操作?）</li>
<li style="padding-left: 30px;">在近端啟動隨身程式系統 (或者自行在操作系統安裝所需套件)</li>
<li style="padding-left: 30px;">將遠端的 cp2020 倉儲 git clone 到近端 (延伸題目: git clone 是甚麼?)</li>
<li style="padding-left: 30px;">利用 git submodule add 導入 cmsimde 當作目錄</li>
<li style="padding-left: 30px;">從近端 cmsimde 目錄中取出 up_dir 中的內容至 cp2020 倉儲根目錄</li>
<li style="padding-left: 30px;">在近端可以進入 cmsimde 目錄, 以 python wsgi.py 啟動動態網頁 (延伸題目: 何謂動態網頁? 有何功能?)</li>
<li style="padding-left: 30px;">在近端編輯動態網頁內容後, 轉為靜態網頁 (如何轉?)</li>
<li style="padding-left: 30px;">完成靜態網頁轉換之後, 利用近端 git 指令將新版本新增, 提交並推送到遠端</li>
</ol>
<p>在近端編寫第一個 Python 程式, 每修改一次都利用 git 進行提交, 修改並提交 4 次後, 可以在任何版本下回復到先前的任一版本內容.</p>
<p style="padding-left: 30px;"><a href="/downloads/cphw1.7z">cphw1.7z</a></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">i = 1

print(i)</pre>
<p>進入 y:\tmp\cphw1 從 git init 開始</p>
<p>每一次改版, i  增量 1</p>
<p>git add .</p>
<p>git commit -m "i=1"</p>
<p>git push</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Y:\tmp\cphw1&gt;git log
commit cb568bc032bb4e4364c347b5b6225c7849450c5f (HEAD -&gt; master)
Author: mdecourse &lt;mdecourse@gmail.com&gt;
Date:   Wed Aug 26 15:18:39 2020 +0800

    i=4

commit d9ef5402c330aac9791a9cd20403ad583854ceb6
Author: mdecourse &lt;mdecourse@gmail.com&gt;
Date:   Wed Aug 26 15:18:19 2020 +0800

    i=3

commit 4b40d3a60e7e37b7847d9fb70c3a0380ab20f9fe
Author: mdecourse &lt;mdecourse@gmail.com&gt;
Date:   Wed Aug 26 15:17:56 2020 +0800

    i=2

commit 1852efb2003bd52c4baa27cc7f0c38b8faf55d14
Author: mdecourse &lt;mdecourse@gmail.com&gt;
Date:   Wed Aug 26 15:17:27 2020 +0800

    i=1</pre>
<p style="padding-left: 30px;">在近端使用電腦儲存檔案, 最理想的情況是要利用 git 或 Fossil SCM 等分散式版次管理套件, 將各版本的內容進行提交並註記改版緣由之後, 再從近端推送到遠端.</p>
<p style="padding-left: 30px;">使用分散式版次管理的目的</p>
<p style="padding-left: 60px;">可以註記每次改版的提交者, 並能利用 git checkout 到先前的各版本</p>
<p style="padding-left: 60px;">資料存一份在遠端, 避免因為近端電腦損毀而丟失資料.</p>
<p style="padding-left: 30px;"></p>
<h2>亂數分組</h2>
<p>亂數分組:</p>
<p>semester=1091</p>
<p>courseno=0762</p>
<p>cp</p>
<p>1a 1091/0762</p>
<p>1b 1091/0776</p>
<p>cad</p>
<p>2a 1091/0788</p>
<p>2b 1091/0801</p>
<p>學員名單 URL: <input id="studListUrl" size="60" type="text" value="https://nfulist.herokuapp.com?semester=1091&amp;courseno=0788"/><br/> 課程代號: <input id="courseName" size="15" type="text" value="cp2020"/><br/> <input id="submit" type="submit" value="開始分組"/><br/> <textarea cols="80" id="output" rows="10"></textarea></p>
<script src="/downloads/dart/random_grouping/random_grouping.js"></script>
<p>四技設一甲計算機程式學員名單:</p>
<p style="padding-left: 30px;"><a href="https://nfulist.herokuapp.com/?semester=1091&amp;courseno=0762">https://nfulist.herokuapp.com/?semester=1091&amp;courseno=0762</a></p>
<p>四技設一乙計算機程式學員名單:</p>
<p style="padding-left: 30px;"><a href="https://nfulist.herokuapp.com/?semester=1091&amp;courseno=0776">https://nfulist.herokuapp.com/?semester=1091&amp;courseno=0776</a></p>
<p><a href="http://mde.tw/lab/content/%E4%BA%82%E6%95%B8%E5%88%86%E7%B5%84.html">參考資料</a></p>
<p>get_student_list.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import 'dart:html';
  
  InputElement studListUrl = querySelector("#studListUrl");
  String studUrl;
  InputElement courseName = querySelector("#courseName");
  String cName;
  // 將 Label 改為 Textarea, 避免產生過程結果嵌入所在頁面
  TextAreaElement output = querySelector("#output");
  
main() {
  querySelector("#submit").onClick.listen((e) =&gt; grouping());
}
  
grouping() {
  output.innerHtml = "";
  
  if (studListUrl.value != "") {
    studUrl = studListUrl.value;
  } else {
    studUrl = 'https://nfulist.herokuapp.com';
  }
  
  if (courseName.value != "") {
	cName = courseName.value;
  } else {
	cName = "cp2020";
  }
  
  // 組序由 1 開始
  int gth = 1;
  // 迴圈序號變數
  int i;
  int j;
  int total;
  int inc;
  // 每組學員暫存數列
  var gpList = [];
  // 全班分組數列
  var group = [];
  // 各組人數數列
  var numList = [];
  
  HttpRequest.getString(studUrl).then((String resp) {
    // 利用 trim() 去除字串最後的跳行符號, 之後再利用 split() 根據 \n 轉為數列
    var studList = resp.trim().split("\n");
    // 數列利用 shuffle() 方法以隨機方法弄亂順序
    studList.shuffle();
    total = studList.length;
    output.text += "全班總計" + total.toString() + " 人\n";
    numList = getNumList(studList.length);
    inc = 0;
    for (i in numList){
      // 列印區隔符號
      output.text += '=' * 20 + "\n";
      output.text += "group $gth 有 " + i.toString() + " 人: \n";
      gpList = [];
      for (j = 0; j &lt; i; j++){
        output.text += studList[j+inc] + "\n";
        // 在各分組數列中加入將對應的學員學號
        gpList.add(studList[j+inc]);
      }
      gth = gth + 1;
      inc = inc + j;
        //output.text += studList[j] + "\n";
        // 逐步將各組暫存的分組數列加入全班分組數列中
      gpList.sort();
      group.add(gpList);
    }
    // 列出全班分組數列
    output.text += group.toString() + "\n";
    // 列出已經排序後的分組名單
    output.text += '=' * 25 + "\n";
    output.text += '以下為排序後的各組成員名單: \n';
    gth = 1;
    /*
    404231
    s4052
    4062
    s4072
    4082
    5072
    5083
    */
    // 先列出純文字以 \n 跳行組員資料
    for (i=0; i &lt; group.length; i++){
      // 列印區隔符號
      output.text += '=' * 20 + "\n";
      output.text += "group $gth \n";
      gpList = [];
      for (j=0; j &lt; group[i].length; j++){
        output.text += group[i][j] + "\n";
      }
      gth = gth + 1;
    }
     
    gth = 1;
    // 最後列出超文件以 &lt;br\&gt; 跳行組員資料, 包含倉儲與網站
    for (i=0; i &lt; group.length; i++){
      // 列印區隔符號
      output.text += '\n' + '=' * 30 + "&lt;br \&gt;";
      output.text += "group $gth &lt;br \&gt;";
      gpList = [];
      for (j=0; j &lt; group[i].length; j++){
          if (group[i][j].startsWith('4052') || group[i][j].startsWith('4072')) {
              output.text += "Repository: &lt;a href='https://github.com/s" + 
                                      group[i][j] + "/" + cName + "'&gt;" + group[i][j] + 
                                      "&lt;/a&gt;" + " | Site: &lt;a href='https://s" + group[i][j] + 
                                      ".github.io/" + cName + "'&gt;" + group[i][j] + 
                                      "&lt;/a&gt;&lt;br \&gt;";
          }
          else {
              output.text += "Repository: &lt;a href='https://github.com/" + 
                                      group[i][j] + "/" + cName +"'&gt;" + group[i][j] + 
                                      "&lt;/a&gt;" + " | Site: &lt;a href='https://" + group[i][j] + 
                                      ".github.io/" + cName + "'&gt;" + group[i][j] + 
                                      "&lt;/a&gt;&lt;br \&gt;";
          }
      }
      gth = gth + 1;
    }
  });
}
  
List getNumList(int total){
  // total student number
  // int total = 65;
  // initial each group expect to be "eachGrp" number of people
  int eachGrp = 10;
  // may divide into "grpNum" number of group
  int grpNum = total ~/ eachGrp;
  // vacant list
  var splits = [];
  // find remainder when total number divid into "grpNum" number of group
  int remainder = total % grpNum;
  // number of people in one group by calculation
  int calGrp = total ~/ grpNum;
  
  for (int i = 0; i &lt; grpNum; i++) {
    splits.add(calGrp);
  }
  //print(splits);
  
  for (int i = 0; i &lt; remainder; i++) {
    splits[i] += 1;
  }
  //print(splits);
  return splits;
 }</pre>
<p>index.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;h4&gt;亂數分組:&lt;/h4&gt;
學員名單 URL: &lt;input type="text" id="studListUrl" size="60" value="https://nfulist.herokuapp.com"&gt;&lt;br /&gt;
課程代號: &lt;input type="text" id="courseName" size="15" value="cp2020"&gt;&lt;br /&gt;
&lt;input type="submit" value="開始分組" id="submit"&gt;&lt;br /&gt;
&lt;textarea id="output" cols="80" rows="10"&gt;&lt;/textarea&gt;</pre>
<p>style.css</p>
<pre class="brush:css;auto-links:false;toolbar:false" contenteditable="false">body {
  color: white;
  font-size: 20px;
}
 
input, select, textarea {
font-size: 100%;
}</pre>
<p>even_grouping.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import random
import requests
  
# getNumList 主要在每組最低人數下, 將不足 10 人的分組
# 平均分配至各組
def getNumList(total, eachGrp=10):
    # total is the number of students
    # each group at least 10 students
    #eachGrp = 10;
    # may divide into "grpNum" number of group
    grpNum = total // eachGrp;
    # check grpNum
    #print(grpNum)
    # vacan list
    splits = []
    # find remainder when total number divid into "grpNum" number of group
    remainder = total % grpNum
    # number of people in one group by calculation
    calGrp = total // grpNum
      
    for i in range(grpNum):
        splits.append(calGrp)
          
    # check first splits
    #print(splits)
    
    for i in range(remainder):
        splits[i] += 1
      
    # check final splits
    #print(splits);
    return splits;
  
# 儲存學生名單資料的 url
target_url = "http://mde.tw/cp2020/downloads/get_student_list/2020spring_cd_2a_list.txt"
# 利用 requests 讀取 url 中的資料
f = requests.get(target_url)
# get student list from target_url
# 利用 splitlines() 將資料放入數列 studList
studList = f.text.splitlines()
# 每組預計分組的最低人數
num_in_one_group = 10
# 每組學員暫存數列
gpList = []
# 全班分組數列
group = []
# 各組人數數列
numList = []
# get numList
numList = getNumList(len(studList), num_in_one_group)
# check numList
# 列出已經補齊的各組人數數列
print("預計各組人數數列:" + str(numList))
  
output = ""
gth = 1
inc = 0
  
# 弄亂 studList
random.shuffle(studList)
output += "以下為尚未排序前的各組學員學號: \n"
for i in numList:
    # 列印區隔符號
    output += '=' * 20 + "\n";
    output += "group " + str(gth) + " 有 " + str(i) + " 人: \n"
    # 每組學員暫存數列, 在此 reset
    gpList = []
    for j in range(i):
        output += studList[j+inc] + "\n"
        # 在各分組數列中加入將對應的學員學號
        gpList.append(studList[j+inc])
        
    gth = gth + 1
    inc = inc + j
    # 將各組學員數列依照學號排序
    gpList.sort()
    group.append(gpList)
  
# 列出尚未排序前的分組結果
print(output)
# 列出已經完成排序的分組數列
print("已經排序後的分組數列:" + str(group))
  
output = ""
# 列出已經排序後的分組名單
output += '=' * 25 + "\n"
output += '以下為排序後的各組成員名單:\n'
gth = 1
  
# 先列出純文字以 \n 跳行組員資料
for i in range(len(group)):
    # 列印區隔符號
    output += '=' * 20 + "\n"
    output += "group" + str(gth) + "\n"
    gpList = []
      
    for j in range(len(group[i])):
        output += str(group[i][j]) + "\n"
        
    gth = gth + 1
      
print(output)</pre>
<h4>使用 Brython</h4>
<p><a href="http://mde.tw/lab/content/Python.html">http://mde.tw/lab/content/Python.html</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 利用 Brython 內建的 open 開啟 url 後, 以 read() 將資料取出
output = open('http://mde.tw/cp2020/downloads/get_student_list/2020spring_cd_2a_list.txt').read()
# 利用 print  將 output 資料列出
print(output)</pre>
<p></p><h2>Kaggle</h2>
<p><a href="https://di2.io/2019/03/is-kaggle-suitable-to-teach-programming-with-python/">https://di2.io/2019/03/is-kaggle-suitable-to-teach-programming-with-python/</a></p>
<p><a href="https://fayz.in/stories/s/1417/0/?ckt_id=ZGL1ZGVk&amp;title=Importance_of_github_kaggle">https://fayz.in/stories/s/1417/0/?ckt_id=ZGL1ZGVk&amp;title=Importance_of_github_kaggle</a></p>
<p><a href="https://www.programmersought.com/article/92261138300/">https://www.programmersought.com/article/92261138300/</a></p>
<p><a href="https://towardsdatascience.com/kaggle-for-beginners-getting-started-75decb43c0c0">https://towardsdatascience.com/kaggle-for-beginners-getting-started-75decb43c0c0</a></p>
<h4>Reference</h4>
<p style="padding-left: 30px;"><a href="https://awesomeopensource.com/project/apachecn/Interview">https://awesomeopensource.com/project/apachecn/Interview</a></p>
<p style="padding-left: 30px;"><a href="https://awesomeopensource.com/project/girls-in-ai/Girls-In-AI">https://awesomeopensource.com/project/girls-in-ai/Girls-In-AI</a></p>
<p style="padding-left: 30px;"><a href="https://awesomeopensource.com/project/Mikoto10032/DeepLearning">https://awesomeopensource.com/project/Mikoto10032/DeepLearning</a></p>
<p style="padding-left: 30px;"><a href="https://awesomeopensource.com/project/ypwhs/dogs_vs_cats">https://awesomeopensource.com/project/ypwhs/dogs_vs_cats</a></p>
<h2>Flask-Flutter</h2>
<p><a href="https://medium.com/@pyzimos/flutter-chatbot-with-python-flask-backend-heroku-deployment-706baafbb8f1">https://medium.com/@pyzimos/flutter-chatbot-with-python-flask-backend-heroku-deployment-706baafbb8f1</a></p>
<p><a href="https://heartbeat.fritz.ai/digit-recognizer-with-flutter-and-tensorflow-lite-33f5145b5f32">https://heartbeat.fritz.ai/digit-recognizer-with-flutter-and-tensorflow-lite-33f5145b5f32</a></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/9HaIGMyAyug" width="560"></iframe></p>
<h3>cmsimde</h3>
<p>在 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 專案中, Flask 網際程式被用來建立動態內容管理系統, 並結合 bs4 與 lxml 模組功能, 將動態網頁轉為靜態網頁, 使用者可以將靜態網頁部署在 Github Pages 或 Heroku. 而靜態網頁可以再結合 Leo Editor 大綱管理程式, 用於整合 pelian 網誌與 reveal.js 網際簡報系統.</p>
<h3>pdf-project</h3>
<p><a href="https://github.com/mdecourse/cd2020pj1">https://github.com/mdecourse/cd2020pj1</a> </p>
<p>功能包括:</p>
<p>透過 authomatic 模組讓使用者以 oauth2 模式登入</p>
<ol>
<li>接受 pdf 檔案上傳至 Google Drive</li>
<li>可讓使用者直接在線上合併 pdfs 檔案或分割鎖上傳的 pdf 檔案</li>
</ol>
<h3>nfu-project</h3>
<p><a href="https://github.com/mdecourse/nfulist">https://github.com/mdecourse/nfulist</a></p>
<p>與 <a href="https://nfulist.herokuapp.com">https://nfulist.herokuapp.com</a> 網站資料同步</p>
<p><a href="https://nfulist.herokuapp.com/?semester=1082&amp;courseno=0767">https://nfulist.herokuapp.com/?semester=1082&amp;courseno=0767</a></p>
<p>heroku login</p>
<p>add _netrc to home</p>
<p>git add .</p>
<p>git commit -m "message"</p>
<p>git push heroku master</p>
<p>git remote add github <a href="https://github.com/mdecourse/nfulist.git">https://github.com/mdecourse/nfulist.git</a></p>
<p>git push github master</p>
<p>cp</p>
<p>1a 1091/0762</p>
<p>1b 1091/0776</p>
<p>cad</p>
<p>2a 1091/0788</p>
<p>2b 1091/0801</p>
<p>cd<br/>2a 1082/0767<br/>2b 1082/0780<br/> <br/>2a 1072/0777<br/>2b 1072/0790<br/>2a 1062/0788<br/>2a 1062/0802<br/> <br/>wcm<br/>1082/0744<br/> <br/>1072/0754<br/>1062/0765<br/> <br/>wcmj<br/>1082/2418</p>
<p></p>
<h2>Brython</h2>
<p><a href="https://github.com/BrythonServer/brython-server">https://github.com/BrythonServer/brython-server</a></p>
<p><a href="https://mdecp2018.github.io/finalproject-bgx">https://mdecp2018.github.io/finalproject-bgx</a></p><h2>Deep Learning</h2>
<p><a href="https://www.kaggle.com/learn/deep-learning">https://www.kaggle.com/learn/deep-learning</a></p>
<h1>Projects</h1>
<h4>雲端電腦輔助機械設計工具的比較</h4>
<p><a href="https://total3dprinting.org/onshape-vs-fusion-360/">https://total3dprinting.org/onshape-vs-fusion-360/</a> 是電腦輔助設計實習與協同產品設計實習課程中的議題之一, 比較 onshape 與 fusion 360 的功能與特性.</p>
<h4>利用 Python 建立雲端程式工具</h4>
<p>結合 Brython, Javascript Gist 與近端程式系統, 利用 Flask 為主體, 建立一個能夠部署在 Heroku 的 Python 網際程式編寫與執行系統.</p>
<p style="padding-left: 30px;">參考: <a href="http://mde.tw/lab/content/Python.html">http://mde.tw/lab/content/Python.html</a></p>
<p style="padding-left: 60px;">原先的系統是直接將導引給 Brython 執行的 Python 程式, 直接寫在網頁中, 然後透過 Javascript 與 html 按鈕逐一帶出已經編寫存入網頁的程式, 然後修改執行.</p>
<p style="padding-left: 60px;">假如, 能夠使用 <a href="http://mde.tw/lab/content/Javascript.html">http://mde.tw/lab/content/Javascript.html</a> 與 <a href="http://mde.tw/lab/content/Dart.html">http://mde.tw/lab/content/Dart.html</a> 中的方法, 將 Python 程式存於 Gist 或 Github Pages 網站, 然後透過 ajax 的方式帶至網際瀏覽器中執行, 並能利用 Javascript 按鈕將在網頁編寫執行的 Python 程式存至近端, 放入特定倉儲中進行版次管理.</p>
<h4>圖形介面程式開發</h4>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-5857-6">Beginning PyQt</a> 終於出書, 之前 <a href="https://riverbankcomputing.com/software/pyqt/download5">PyQt5</a> 曾被用來開發平面機構分析與合成套件 - <a href="https://github.com/KmolYuan/Pyslvs-UI">Pyslvs-UI</a>, 接下來 <a href="https://riverbankcomputing.com/software/pyqt/download5">PyQt5</a> 或 <a href="https://www.qt.io/qt-for-python">Qt for Python</a> 還能用來開發甚麼機械設計相關工具套件?</p>
<h4>Discourse 論壇與 <a href="https://pypi.org/project/pydiscourse/">Pydiscourse</a></h4>
<p><a href="https://forum.eng.nfu.edu.tw/">https://forum.eng.nfu.edu.tw/</a> 以 Ruby 編寫, 若能透過 <a href="https://github.com/tindie/pydiscourse">Pydiscourse</a> 與 <a href="https://docs.discourse.org/">https://docs.discourse.org/</a> 中的 Discourse API 結合, 將可延伸 <a href="http://lab.mde.tw/blog/sync-pelican-and-blogger-content.html">http://lab.mde.tw/blog/sync-pelican-and-blogger-content.html</a> 中的 Markdown 文章, 在<a href="https://github.com/leo-editor/leo-editor">Leo Editor</a> 的編輯下, 將內容同步至 <a href="https://github.com/getpelican/pelican">Pelican</a> 與 <a href="https://www.blogger.com/">Blogger</a> 網誌.</p>