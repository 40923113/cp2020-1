var tipuesearch = {"pages": [{'title': 'About', 'text': '這裡是國立虎尾科技大學機械設計工程系大一的計算機程式課程網頁. \n CP2020 將在  https://kaggle.com ,  https://colab.research.google.com  以及可攜程式系統上進行. \n 以下是 CP2020 課程進行流程: \n W1 學員登入學校配發的 @gm 郵件帳號後,  填寫基本資料 \n W1 告知將利用  Gitter  進行課程議題討論\xa0(其餘各種問題可以至  discourse  討論) \n https://gitter.im/mdecourse/cp2020 \n https://forum.eng.nfu.edu.tw \xa0 \n W1 就電腦軟硬體與網路環境的使用進行介紹 \n W2 學員建立  Github ,  Gitlab,   Heroku  與  Authorea  帳號 \n Github: 各學員在學號帳號下建立 cp2020 倉儲. \n Gitlab: 各學員將 cp2020 倉儲同步至 gitlab. \n Heroku: 雲端應用程式系統, 可部署靜態網頁與網際 Python 程式. \n Authorea: 各組用來編寫協同期末專案報告 pdf 檔案. \n W2  學員利用  Github Pages  與  CMSiMDE  建立個人網頁 \n W2 學員學習如何利用 Git 與 Github 維護個人網頁 \n Ｗ3 統整 W1 與 W2 教材內容至各學員個人網頁 \n Ｗ3 完成亂數分組,\xa0 每班分成五組 \n W4 - W9 Python 基本語法與功能 \n Ｗ10 - W14 分組 Python 專案 \n Ｗ15 - W18 分組總結報告 \n 電腦輔助設計室與協同設計室行事曆 \n 全頁檢視 \n \n', 'tags': '', 'url': 'About.html'}, {'title': '評分', 'text': '計算機程式自評與互評表單  (每週課程結束後, 請登入 @gm 後填寫) \n \n (上圖取自\xa0https://link.springer.com/book/10.1007/978-3-642-03446-6) \n 本課程的評分標準: \n \n 從未遲到者得 10% \n 從未缺席且從未無正當理由離席超過 15 分鐘者得 20% \n 從未缺交各週作業且從未抄襲他人作業且從未不當引用網路資料者得 30% \n 作業與報告內容充實, 每一項課程內容都拍攝具參考價值之教學影片者得 20% \n 完成具體且創新之課程內容改進項目, 並能積極協助組員解決各種難題者得 10% \n 個人之倉儲內容, 網頁, 網誌與簡報內容均令人嘆為觀止者得 10% \n \n 根據上述課程評分標準, 由組員之自評成績決定課程期中成績, 視為本課程之學員期望成績, 期中考後, 則依據各週之組員自評成績, 組員互評成績與教師評分成績, 按照下列流程計算學員之學期成績. \n \'\'\'\n根據評分表單中的 自評分數, 互評得分, 教師評分, 計算學員課程成績\n\'\'\'\n# diff 函式傳回兩輸入分數的絕對差值 \ndef diff(分數1, 分數2):\n    return abs(分數1 - 分數2)\n     \n# getHigh函式傳回兩分數中較高者\ndef getHigh(分數1, 分數2):\n    if  分數1 > 分數2:\n        return 分數1\n    else:\n        return 分數2\n\n# getLow 函式傳回兩分數中較低者\ndef getLow(分數1, 分數2):\n    if  分數1 < 分數2:\n        return 分數1\n    else:\n        return 分數2\n\n# 分組評分函式取自評與教師評分比較, 若差距大於 5 分取其低者\n# 否則依自評 40%, 教師 60% 計算\ndef 分組評分(自評分數, 教師評分):\n    return getLow(自評分數, 教師評分)\n    if diff(自評分數, 教師評分) > 5:\n        return getLow(自評分數, 教師評分)\n    else:\n        return int(自評分數*0.4 + 教師評分*0.6)\n\n# 全班比分函式取互評與分組評分比較, 若差距小於 5 分取其高者\n# 否則依互評得分 40%, 分組評分 60% 計算     \ndef 全班比分(互評得分, 分組評分):\n    if diff(互評得分, 分組評分) < 5:\n        學員成績 = getHigh(互評得分, 分組評分)\n    else:\n        學員成績 = int(互評得分*0.4 + 分組評分*0.6)\n    return 學員成績\n\n# 學員之學期成績依照上述分組評分與全班比分函式計算 \ndef 學員成績(自評分數, 互評得分, 教師評分):\n    學員課程成績 = 全班比分(互評得分, 分組評分(自評分數, 教師評分))\n    return 學員課程成績\n\n# 利用迴圈從 50 起每次增量 5 分, 分別列出各評分組合下的成績計算結果    \nfor i in range(10):\n    self_score = 50 + i*5\n    for j in range(10):\n        peer_score = 50 + j*5\n        for k in range(10):\n            teacher_score = 50 + k*5\n            print(self_score, peer_score, teacher_score, "=", 學員成績(self_score, peer_score, teacher_score))', 'tags': '', 'url': '評分.html'}, {'title': '討論區', 'text': 'https://gitter.im/mdecourse/cp2020 \xa0(計算機程式課程相關) \n https://forum.eng.nfu.edu.tw \xa0 (其他議題) \n', 'tags': '', 'url': '討論區.html'}, {'title': '開發環境', 'text': '利用隨身碟中的可攜程式環境 \n 從  http://a.kmol.info:88  (只能從系上 IPv6 網段連接)下載 \n 必須自行安裝所需模組與程式庫 \n 必須自行配置加速硬體與操作系統程式庫 \n https://kaggle.com \n 主要用於 Data Science 相關程式開發與競賽用 \n 直接利用瀏覽器執行程式, 近端電腦無需安裝模組與套件 \n 可以使用雲端硬體加速功能 \n 可以多人協同編寫同一程式, 編寫的程式可以直接在網路上分享 \n https://colab.research.google.com \n 直接利用瀏覽器執行程式, 近端電腦無需安裝模組與套件 \n 可以使用 GPU 與 TPU 加速運算 \n 可以多人協同編寫同一程式, 編寫的程式可以直接在網路上分享 \n colab  功能介紹 \n 透過網際 brython 環境 \n http://mde.tw/lab/content/Python.html \n 僅支援部分 Python 功能 \n 執行速度較 CPython 慢許多 \n \n', 'tags': '', 'url': '開發環境.html'}, {'title': 'Computer', 'text': '請利用 @gm 帳號至下列連結登記自學帳號, 從中學習與計算機程式課程相關內容. \n https://oli.cmu.edu/product-category/computer-science-programming-indep/ \xa0 \n 以下畫面以 50703199 At mde dot nfu dot edu dot tw 註冊取得. \n \n 個人電腦軟硬體簡介 \n 軟體 \n 電腦操作系統 \n Windows \n Linux \n Mac OS \n 分散式版次管理系統 \n 近端 \n 遠端 \n 網際內容管理 (Github 與 Heroku) \n CMSiMDE \n Pelican \n Reveal.js \n 將包含 html 與 Javascript 的靜態網頁資料以 Github Pages, Gitlab Pages 或 Heroku 伺服 \n Python 網際程式透過 Flask 則可以部署到  Heroku  雲端主機 \n Reference \n Computer Programming as an Art Knuth.pdf \n Interview_transcript_2007_Knuth.pdf \n \n \n', 'tags': '', 'url': 'Computer.html'}, {'title': 'PC Hardware', 'text': '請利用 @gm 帳號至下列連結登記自學帳號, 從中學習與計算機程式課程相關內容. \n https://oli.cmu.edu/courses/pc-hardware-open-free/ \xa0 \n', 'tags': '', 'url': 'PC Hardware.html'}, {'title': 'PC Software', 'text': '請利用 @gm 帳號至下列連結登記自學帳號, 從中學習與計算機程式課程相關內容. \n https://oli.cmu.edu/courses/pc-software-open-free/ \xa0 \n', 'tags': '', 'url': 'PC Software.html'}, {'title': 'C++', 'text': '計算機程式主要說明 Python 解譯程式的用法, 但若要編譯  Solvespace ,  SciTE ,  Range3 ,  Tiny C  或要編寫 CoppeliaSim  C++ Remote API 應用程式 , 就必須使用 C++ 鯿譯器. \n 學習 C++ 可以使用線上編譯器: \n http://cpp.sh/ \n https://ideone.com/ \n https://rextester.com/ \n https://www.jdoodle.com/online-compiler-c++/ \n https://www.onlinegdb.com/online_c++_compiler \n https://www.tutorialspoint.com/compile_cpp_online.php \n https://www.programiz.com/cpp-programming/online-compiler/ \n Ebooks:  Beginning C++17.pdf \n 在 Windows 10 64 位元下的可攜 C++ 編譯器:  https://www.msys2.org/ \n 登入 @gm 下載可攜  Msys2_project_portable.7z  (3.6GB) \n', 'tags': '', 'url': 'C++.html'}, {'title': 'API', 'text': 'API 為 Application Programming Interface, 意即應用程式介面, 用於延伸特定程式套件的功能, 以 Google 所提供的雲端應用程式為例, 常見的 API 有 Google GMail API, Google Blogger API, Google Drive API 等, 而 Github 則提供 Github API. \n 當使用者登入 GMail 帳號後, 連接至  https://console.developers.google.com \xa0即可進入 Google 所有程式庫 API 的設定. \n Google GMail API \n Gmail Json to Token data \n import pickle\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom httplib2 import Http\nfrom googleapiclient.discovery import build\n\ncreds = None\nSCOPES = \'https://www.googleapis.com/auth/gmail.send\' # Allows sending only, not reading\n\nflow = InstalledAppFlow.from_client_secrets_file(\n    \'./../scrum1_gmail.json\', SCOPES)\ncreds = flow.run_local_server(port=0)\n# Save the credentials for the naext run\nwith open(\'./../scrum1_gmail.pickle\', \'wb\') as token:\n    pickle.dump(creds, token)\n\nservice = build(\'gmail\', \'v1\', credentials=creds)\nprint(service) \n send mail \n from email.mime.text import MIMEText\nfrom base64 import urlsafe_b64encode\nfrom httplib2 import Http\nfrom googleapiclient.discovery import build\nimport pickle\n\nSENDER = "your_sender@domain_name"\nRECIPIENT = "your_recipient@domain_name"\nSUBJECT = "gmail api 寄信測試"\nCONTENT = \'\'\' 這是文章內容, http://the.web.site\'\'\'\n\ncreds = None\nwith open(\'./../scrum1_gmail.pickle\', \'rb\') as token:\n    creds = pickle.load(token)\nservice = build(\'gmail\', \'v1\', credentials=creds)\n\n# https://developers.google.com/gmail/api/guides/sending\ndef create_message(sender, to, subject, message_text):\n  """Create a message for an email.\n\n  Args:\n    sender: Email address of the sender.\n    to: Email address of the receiver.\n    subject: The subject of the email message.\n    message_text: The text of the email message.\n\n  Returns:\n    An object containing a base64url encoded email object.\n  """\n  message = MIMEText(message_text)\n  message[\'to\'] = to\n  message[\'from\'] = sender\n  message[\'subject\'] = subject\n  encoded_message = urlsafe_b64encode(message.as_bytes())\n  return {\'raw\': encoded_message.decode()}\n\n\n# https://developers.google.com/gmail/api/guides/sending\ndef send_message(service, user_id, message):\n  """Send an email message.\n\n  Args:\n    service: Authorized Gmail API service instance.\n    user_id: User\'s email address. The special value "me"\n    can be used to indicate the authenticated user.\n    message: Message to be sent.\n\n  Returns:\n    Sent Message.\n  """\n  try:\n    message = (service.users().messages().send(userId=user_id, body=message)\n               .execute())\n    print(\'Message Id: %s\' % message[\'id\'])\n    return message\n  #except errors.HttpError, error:\n  except:\n    print(\'An error occurred: %s\' % error)\n\n\nraw_msg = create_message(SENDER, RECIPIENT, SUBJECT, CONTENT)\nsend_message(service, "me", raw_msg) \n Google Blogger API \n Blogger Json to Token data \n # https://developers.google.com/blogger/docs/3.0/using\n# pip install google_auth_oauthlib\n# under Mac command + b to execute\n\'\'\'\nNo module named \'googleapiclient\'\n    pip install google-api-python-client \nNo module named \'google_auth_oauthlib\'\n    pip install google_auth_oauthlib\nAdd to Blogger need oauth2client\n    pip install oauth2client\n\'\'\'\nimport pickle\nimport os\nfrom googleapiclient.discovery import build\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom google.auth.transport.requests import Request\n\n\nSCOPES = [\'https://www.googleapis.com/auth/blogger\', ]\n\n# we check if the file tBo store the credentials exists\nif not os.path.exists(\'mdecourse_blogger_token.dat\'):\n\n    flow = InstalledAppFlow.from_client_secrets_file(\'mdecourse_blogger_desktop.json\', SCOPES)\n    credentials = flow.run_local_server()\n\n    with open(\'mdecourse_blogger_token.dat\', \'wb\') as credentials_dat:\n        pickle.dump(credentials, credentials_dat)\nelse:\n    with open(\'mdecourse_blogger_token.dat\', \'rb\') as credentials_dat:\n        credentials = pickle.load(credentials_dat)\nservice = build(\'blogger\', \'v3\', credentials=credentials)\ng.es(service) \n add to mblogger \n @language python\nfrom markdown import markdown\nfrom oauth2client import client\n#from googleapiclient import sample_tools\nimport os\n# 配合使用 credential token\nimport pickle\nfrom googleapiclient.discovery import build\n#from google_auth_oauthlib.flow import InstalledAppFlow\n#from google.auth.transport.requests import Request\n\nos.environ[\'TZ\'] = \'Asia/Taipei\'\nwith open(\'./../../yen_gm_blogger_token.dat\', \'rb\') as credentials_dat:\n    credentials = pickle.load(credentials_dat)\nservice = build(\'blogger\', \'v3\', credentials=credentials)\n\ndef get_cat_tag_content(data):\n    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---\n    # 用跳行符號分割\n    data_list = data.split("\\n")\n    #第 2 行為 title\n    title= data_list[1]\n    #第 4 行為 category\n    category = data_list[3]\n    #第 5 行為 tags\n    tags = data_list[4]\n    # 有多項資料的 content 型別為數列\n    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料\n    content = "\\n".join(data_list[8:])\n    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 <!--more-->\n    content = content.replace(\'<!-- PELICAN_END_SUMMARY -->\', \'<!--more-->\')\n    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式\n    #content = content.replace(\'~~~python\', \'[code lang="python"]\')\n    #content = content.replace(\'~~~\', \'[/code]\')\n    return title, category, tags, content\n\n# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容\n# p.h 為 @clean filename.md\n# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案\nmd_filename = p.h.split(" ")[1]\nwith open(md_filename, \'r\', encoding="utf-8") as content_file:\n    md_content = content_file.read()\n# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)\ntitle_str, category_str, tags_str, content = get_cat_tag_content(md_content)\ncategory = category_str.split(":")[1]\ntags = tags_str.split(":")[1].split(",")\ntags.append(category)\n# title 是一個單獨的字串\ntitle = title_str.split(":")[1]\n# 將 markdown 格式 content 轉為 html\ncontent = markdown(content)\n# 以下處理 content 的 <h2> 標題\ncontent = content.replace("<h2>", "<h2><font size=\'4\'>")\ncontent = content.replace("</h2>", "</font></h2>")\n# g.es(content)\n\ntry:\n    \'\'\'\n    users = service.users()\n    # 取得使用者 profile 資料\n    user = users.get(userId=\'self\').execute()\n    print(\'網誌名稱: %s\' % user[\'displayName\'])\n    \'\'\'\n    blogs = service.blogs()\n    # 取得使用者所建立網誌名稱\n    blogs = blogs.listByUser(userId=\'self\').execute()\n    # post_id is now blogs["items"][0]["id"]\n    #blog_id = blogs["items"][0]["id"]\n    blog_id = "7949497010793271992"\n    #for blog in blogs[\'items\']:\n        #print(blog[\'name\'], blog[\'url\'])\n    posts = service.posts()\n    # 新增網誌 post 時, 需要 post_id\n    body = {\n    "kind": "blogger#post",\n    "id": blog_id,\n    "title": title,\n    # 利用 markdown 函式, 將 .md 的內文轉為 html, 作為 Blogger 的文章內容\n    "content": content,\n    "labels": tags\n    }\n    insert = posts.insert(blogId=blog_id, body=body)\n    posts_doc = insert.execute()\n    post_id = posts_doc["id"]\n    #print(posts_doc)\n    # 改用 credential token 後不會產生 blogger.dat\n    #os.remove("blogger.dat")\n    # 利用最後的 child 節點來儲存 post_id\n    to_save_post_id = p.insertAsLastChild()   \n    # 改為內文為空的節點, id 直接標在 head 標題 \n    to_save_post_id.b = ""\n    to_save_post_id.h = post_id\n    # 因為新增節點, commander 必須 redraw\n    c.redraw()\n    g.es("post_id 為", post_id)\n    g.es("已經將資料送往 MBlogger!")\nexcept(client.AccessTokenRefreshError):\n    g.es("error")\n\n \n edit to mblogger \n @language python\nfrom markdown import markdown\nfrom oauth2client import client\n#from googleapiclient import sample_tools\nimport os\n# 配合使用 credential token\nimport pickle\nfrom googleapiclient.discovery import build\n#from google_auth_oauthlib.flow import InstalledAppFlow\n#from google.auth.transport.requests import Request\n\nos.environ[\'TZ\'] = \'Asia/Taipei\'\nwith open(\'./../../yen_gm_blogger_token.dat\', \'rb\') as credentials_dat:\n    credentials = pickle.load(credentials_dat)\nservice = build(\'blogger\', \'v3\', credentials=credentials)\n\ndef get_cat_tag_content(data):\n    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---\n    # 用跳行符號分割\n    data_list = data.split("\\n")\n    #第 2 行為 title\n    title= data_list[1]\n    #第 4 行為 category\n    category = data_list[3]\n    #第 5 行為 tags\n    tags = data_list[4]\n    # 有多項資料的 content 型別為數列\n    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料\n    content = "\\n".join(data_list[8:])\n    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 <!--more-->\n    content = content.replace(\'<!-- PELICAN_END_SUMMARY -->\', \'<!--more-->\')\n    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式\n    #content = content.replace(\'~~~python\', \'[code lang="python"]\')\n    #content = content.replace(\'~~~\', \'[/code]\')\n    return title, category, tags, content\n\n# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容\n# p.h 為 @clean filename.md\n# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案\nmd_filename = p.h.split(" ")[1]\nwith open(md_filename, \'r\', encoding="utf-8") as content_file:\n    md_content = content_file.read()\n# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)\ntitle_str, category_str, tags_str, content = get_cat_tag_content(md_content)\ncategory = category_str.split(":")[1]\ntags = tags_str.split(":")[1].split(",")\ntags.append(category)\n# title 是一個單獨的字串\ntitle = title_str.split(":")[1]\n# 將 markdown 格式 content 轉為 html\ncontent = markdown(content)\n# 以下處理 content 的 <h2> 標題\ncontent = content.replace("<h2>", "<h2><font size=\'4\'>")\ncontent = content.replace("</h2>", "</font></h2>")\n# g.es(content)\n\ntry:\n    blogs = service.blogs()\n    # 取得使用者所建立網誌名稱\n    blogs = blogs.listByUser(userId=\'self\').execute()\n    #blog_id = blogs["items"][0]["id"]\n    blog_id = "7949497010793271992"\n    # 設法取得原 post 的 id\n    postid_outline = p.getLastChild()\n    # 直接從標題取得 post 的 id 號碼\n    post_id = postid_outline.h\n    posts = service.posts()\n    # 更新網誌文章時的 body\n    body = {\n    "kind": "blogger#post",\n    "title": title,\n    "content": content\n    }\n    # need to save postId to outline head\n    update = posts.update(blogId=blog_id, postId=post_id, body=body, publish=True)\n    update_doc = update.execute()\n    # 使用 credential token 後, 無需刪除 blogger.dat\n    #os.remove("blogger.dat")\n    g.es("post_id 為", post_id)\n    g.es("已經將更新資料送往 M Blogger!")\nexcept(client.AccessTokenRefreshError):\n    g.es("error")\n \n Google Drive API \n # for uploadToGDrive3\n# pip install google-api-python-client\n# https://github.com/googleapis/google-api-python-client\nimport pickle\nfrom googleapiclient.discovery import build\nfrom apiclient.http import MediaFileUpload\n\n# for filegdupload\nimport pickle\nimport codecs\nimport json\n\n# for use under wcm.kmol.info flask server\n\ndef uploadToGdrive3(fileName, mimeType):\n    # get upload folder id\n    # GDrive 上 uploaded 目錄的 fileID\n    with open("./../gdrive_uploaded_id.txt", \'r\') as content_file:\n        folderID = content_file.read()\n\n    creds = None\n    with open(\'./../gdrive_write_token.pickle\', \'rb\') as token:\n        creds = pickle.load(token)\n    # 讀進既有的 token, 建立 service\n    driveService = build(\'drive\', \'v3\', credentials=creds)\n\n    metadata = {\n        \'name\': fileName,\n        \'mimeType\': mimeType,\n        # 注意: 必須提供數列格式資料\n        \'parents\': [folderID]\n        }\n\n    filePath = _curdir + "/downloads/" + fileName\n    media = MediaFileUpload(filePath,\n                                            mimetype=mimeType,\n                                            chunksize=1024*1024,\n                                            resumable=True\n                                            )\n\n    gdFile = driveService.files().create(\n        body=metadata,\n        media_body=media,\n        fields=\'id\'\n    ).execute()\n    fileID = gdFile.get("id")\n\n    return fileID\n \n \n', 'tags': '', 'url': 'API.html'}, {'title': 'Logics and Proofs', 'text': '請利用 @gm 帳號至下列連結登記自學帳號, 從中學習與計算機程式課程相關內容. \n https://oli.cmu.edu/courses/logic-proofs-copy/ \n', 'tags': '', 'url': 'Logics and Proofs.html'}, {'title': 'Media Programming', 'text': '請利用 @gm 帳號至下列連結登記自學帳號, 從中學習與計算機程式課程相關內容. \n https://oli.cmu.edu/courses/media-programming-copy/ \xa0 \n', 'tags': '', 'url': 'Media Programming.html'}, {'title': 'Network', 'text': 'Facebook:  the road to IPv6.pdf \n 電腦網路系統與設定簡介 \n \n 校內網路設定 \n 系網路 \n IPv4 與 IPv6 \n 代理主機 \n 校外網路設定 \n VPN \n 下載安裝校方提供軟體 \n 每半年認證一次 \n 下載校方購買的電子書與期刊', 'tags': '', 'url': 'Network.html'}, {'title': 'SSH', 'text': 'SSH 網路連線加密機制 \n SSH 指 Secure SHell, 是一種網路連線加密機制, 當我們在 Mac OS 或 Linux 操作系統中的 Terminal 或 XTerm 時, 可以利用 ssh 帳號@遠端主機 ip 或符號名稱, 就可以輸入認證密碼, 登入到遠端主機. \n 一般針對公開的 Github 倉儲, 任何人都可以直接透過 https 協定 clone 倉儲, 無需認證, 但是倉儲協同者若要從近端將改版資料送到 Github, 就必須通過認證, 假如採 https 協定, 則倉儲協同者在推送改版資料時, 必須提供帳號與密碼. \n 除了 https 協定, Github 也接受倉儲的協同者以 SSH 連線的方式, git clone private 倉儲, 或以 SSH 連線的方式將近端改版資料推送到遠端倉儲. \n SSH 的連線加密機制依賴 private key 與 public key 之間的配對, 當使用者建立 SSH key pair 時, private key 必須保護在近端, 而 public key 則必須送到進行認證的遠端伺服器中. \n 建立 OpenSSH key pair \n Github 伺服器所支援的 SSH 為 OpenSSH 檔案格式的協定, 因此使用者要送到 Github 伺服器上的 OpenSSH 格式 public key, 可以透過 portablegit 中的 sh.exe 進入 SHell, 然後利用以下指令建立採  rsa  加密演算法的 key pair: \n ssh-keygen -t rsa -b 4096 -C "使用者學號" \n 在 -C 後的使用者學號字串, 會直接附加在 OpenSSH public key 檔案的最後端, 讓使用者得以辨識 public key 的對應使用者, 而所建立的 OpenSSH private key 則可以透過 puttygen 轉換為 putty 特有檔案格式. \n Putty 作為 SSH 連線客戶端工具 \n Putty 套件可用於 Windows 與 Linux 操作系統, 可以讓使用者以 SSH 加密機制遠端登入到其他伺服器主機, 由於電腦輔助設計室電腦的第三磁區上課時會轉為純 IPv6 協定上網, 當使用者要將近端改版資料推送到遠端時, 由於 Github 至今仍只支援 IPv4 網路協定, 因此無論是以 https 或 ssh 方式連線, 都必須透過能同時支援 IPv4 與 IPv6 的代理主機. \n 以 https 協定對 Github 連線的代理主機設定位於 home/.gitconfig, 而在 Windows 10 操作系統中採 SSH 對 Github 連線, 就必須將代理主機與 private key 的設定, 透過 Putty 完成. \n 以 SSH 協定與 Github 連線 \n 1. 建立一對 OpenSSH key pair, private key 保留在近端, 將 public key 登記在 Github 所屬帳號設定中. \n 2. 近端可攜系統啟動時, 必須確認已經設定 \n set GIT_SSH=%Disk%:\\putty\\plink.exe \n 表示 git 將透過 putty 工具以 ssh 加密協定對 Github 連線 \n 3. 在 Putty 中設定對 github.com ssh 時必須提供的 Proxy 代理主機設定與 Auth 認證所需的近端 private key, 而且必須利用 puttygen 將 OpenSSH 格式轉為 putty 檔案格式 \n 4. 無論在 git clone 或 git push (URL 位於倉儲 .git/config 中), URL 必須使用  git@github.com:帳號/倉儲名稱.git  連線 \n', 'tags': '', 'url': 'SSH.html'}, {'title': 'Topics', 'text': '\n Open Design Movement.pdf \n Designing Open Engineering Systems.pdf \n Inductry 4.0 and Workforce for Tomorrow.pdf \n Digitization is the transformation from analog to digital or digital representation of a physical item with the goal to digitize and automate processes or workflows. \n Digital Business is the creation of new business designs by blurring the digital and physical worlds. It promises to usher in an unprecedented convergence of people, business and things that disrupts existing business models - even those born of the Internet and e-business eras. \n Digital Transformation is the novel use of digital technology to solve traditional problems. These digital solutions enable - other than efficiency via automation - new types of innovation and creativity, rather than simply enhance and support traditional methods. Success is anchored in both digital business and digitization. \n Interoperability: The ability of machines, devices, sensors, and people to connect and communicate with each other via the Internet of Things (IoT) or the Internet of People (IoP). \n Information transparency: The ability of information systems to create a virtual copy of the physical world by enriching digital plant models with sensor data. This requires the aggregation of raw sensor data to higher-value context information. \n Technical assistance: First, the ability of assistance systems to support humans by aggregating and visualizing information comprehensibly for making informed decisions and solving urgent problems on short notice. Second, the ability of cyber physical systems to physically support humans by conducting a range of tasks that are unpleasant, too exhausting, or unsafe for their human co-workers. \n Decentralized decisions: The ability of cyber physical systems to make decisions on their own and to perform their tasks as autonomously as possible. Only in the case of exceptions, interferences, or conflicting goals, are tasks delegated to a higher level. \n In addition to being able to adapt to advances in technology, the person needs to be able to communicate and relate to people (from different disciplines, cultures, values) who may not be co-located. Talent in a digitally transforming enterprise ($Talent_{dt}$) can loosely be expressed as follows: \n $Talent_{dt} = Talent + Generative Learning$ \n Generative learning is learning that enhances our capacity to innovate and create. Foundational to it is the active integration of new ideas with the learner’s existing schemata. \n We cannot teach people how to learn what is needed, unlearn what is no longer relevant and re-learn that which is still needed. We can provide an opportunity for people to learn by reflecting on doing (Experiential Learning). \n Machine Learning Applications for Furnamce Control and Process Optimization in Steelmaking.pdf \n 課程助教: \n 40723150 (lead), 40723110, 40723115, 40723138, 40723148 \n 40723145 (lead), 40723102, 40723103, 40723153, 40723245 \n 40723212 (lead), 40723216, 40723223, 40723246 \n 負責事項: \n 電腦輔助設計室電腦第三磁區系統維護 \n 每週四 19:00 - 21:00 在電腦輔助設計室為操作實習與助教協助回答問題時間 \n \n \n', 'tags': '', 'url': 'Topics.html'}, {'title': 'Video', 'text': "本課程所有學員都必須熟悉利用下列工具製作電腦操作過程錄影並協同進行線上直播與錄影: \n ShareX \n 課程進行中的所有操作細節都會利用  ShareX  進行錄影, 並將 mp4 影片檔案放入  cp2020 課程線上教學影片區 , 各學員可以直接利用電腦或手機觀看. \n Google Meet \n https://meet.google.com/ \xa0允許 @gm 用戶進行線上串流對談, 分享電腦操作畫面, 文字留言以及串流影音錄影等功能, 各分組學員必須熟悉如何操作並且在分組後每單數週, 利用  Google Meet  進行線上會議討論與錄影存證. \n Youtube  +\xa0 OBS \n OBS  支援多元的電腦影音來源組合功能, 配合  Youtube  的線上串流直播與錄影功能, 可以讓不參與會議者以文字留言板進行互動或在線上觀看直播.\xa0 各分組學員必須熟悉如何操作並且在分組後每雙數週, 利用  Youtube  +  OBS  進行線上會議討論與錄影存證. \n Wink \n Wink  是一套用來製作電腦操作流程說明用的工具, 之前 2.0 版本的輸出檔案為 Flash swf 檔案格式, 但因各瀏覽器將在  2020 年底停止支援 Flash 播放功能 , 因此目前作者正在測試能夠透過  FFMPEG  輸出 mp4 檔案的版本, 待其正式推出後將可用於課程教學中. \n 以下為參考用的線上影片: \n Deep Learning \n \n 2016 \n By 2020, the workplace will look very different from the one we see today. Companies will function in a vastly more  digitized environment , but 30 percent of them will fail because there aren't enough workers with the skills to drive the  digital transformation  that companies need. \n Analysts are forecasting a global shortage of 38 million to 40 million college-educated workers, a gap that will affect advanced nations as well as emerging countries. And the length of tenure in a job is shortening as well. The average time a worker spends in one job has declined from five to seven years to only two to three years, widening the gap between supply and demand. This session will explore the critical changes that must be made to give workers the skills required in the workforce of tomorrow. \n \n 2017 \n In the eyes of top executives, their job is to imagine the future and work towards making that imagined future a reality. Many of the largest companies in the world are intent on embracing change and building pathways that lead to a robust workforce, innovation and job creation. Corporate leaders must pursue and encourage growth while also promoting values that reach beyond the bottom line. \n How do business leaders build and drive the workforce of the future?  Change can be an amorphous concept; how should corporations define and pursue it?  What are the most effective ways for CEOs and other top executives to combine growth and purpose to reflect workforce and corporate values and culture? \n \n 2018 \n \n 2019 \n \n 2020 \n \n", 'tags': '', 'url': 'Video.html'}, {'title': 'W1', 'text': '每班按照學號使用固定電腦, 若電腦故障則必須在一週內負責告知助教, 並將電腦第三磁區複製回原始狀態, 若電腦硬體故障則需回報給助教設法請廠商進行維護, 期間則至使用最後一列備用電腦. \n 準備在個人的電腦, 筆電或電腦輔助設計室中的電腦, 製作合用的可攜程式系統. \n W1 學員登入學校配發的 @gm 郵件帳號後, \xa0 填寫基本資料 \n W1 告知將利用 \xa0 Gitter \xa0 進行課程議題討論 (其餘各種問題可以至  discourse  討論) \n https://gitter.im/mdecourse/cp2020 \xa0 \n https://forum.eng.nfu.edu.tw \xa0 \n W1 就電腦軟硬體與網路環境的使用進行介紹 \n 上課時將以 50703199 At mde dot nfu dot edu dot tw  登入 介紹 \n W1 登入 @gm 帳號後, 可以直接利用  https://kaggle.com \xa0中的 Notebook 執行 Python 程式 \n 在 Kaggle 中啟用 GPU 與網路連線需要利用手機門號驗證, 而且一個門號只能驗證一個帳號 \n https://www.kaggle.com/mdecourse/cp2020 \xa0 \n https://www.kaggle.com/mdecourse/ml2020 \xa0 \n Notice: 一甲 9/24 (四) 下午要補 10/2 中秋節連假的課程時段 \n', 'tags': '', 'url': 'W1.html'}, {'title': 'W1_list', 'text': '1. 基本資料填了沒?  填寫基本資料 \n 2. 會不會進入  https://kaggle.com \xa0 利用 Python Notebook 練習 Python 程式? \n var1 = 1\nvar2 = 1.01\nvar3 = "integer"\nvar4 = "float number"\n_var5 = "Hello"\nprint(_var5 + "," + str(var1) + " is an " + var3 + ".") \n 3. 操作發生問題, 知不知道去哪裡問? \n https://gitter.im/mdecourse/cp2020 \xa0 \n https://forum.eng.nfu.edu.tw \xa0 \n 提問題之前要先看看  cp2020 課程線上教學影片區  中的教學影片有沒有相關內容, 看完教學影片是否將重點整理在自己的紙本筆記中?\xa0 有沒有逐步養成與組員協同找答案的習慣? \n 4. 各小組有沒有準備開始在線上利用  Meet  或  Youtube  +\xa0 OBS  開每週小組討論會議? \n Google Meet \n https://meet.google.com/ \xa0允許 @gm 用戶進行線上串流對談, 分享電腦操作畫面, 文字留言以及串流影音錄影等功能, 各分組學員必須熟悉如何操作並且在分組後每單數週, 利用  Google Meet  進行線上會議討論與錄影存證. \n Youtube  +\xa0 OBS \n OBS  支援多元的電腦影音來源組合功能, 配合  Youtube  的線上串流直播與錄影功能, 可以讓不參與會議者以文字留言板進行互動或在線上觀看直播.\xa0 各分組學員必須熟悉如何操作並且在分組後每雙數週, 利用  Youtube  +  OBS  進行線上會議討論與錄影存證. \n 5. 知不知道什麼時候 HW1 due? Github Pages 建起來之後, 趕快進行. \n http://mde.tw/cp2020/content/W3.html   \n 知不知道 HW2 也規劃好了? \n', 'tags': '', 'url': 'W1_list.html'}, {'title': 'W2', 'text': 'W2 學員建立 \xa0 Github , \xa0 Gitlab, \xa0 Heroku \xa0 與 \xa0 Authorea \xa0 帳號 \n W2 \xa0 學員利用 Github Pages 與 CMSiMDE 建立個人網頁 \n W2 學員學習如何利用 Git 與 Github 維護個人網頁 \n 下載可攜 Python 套件 \n 在電腦輔助設計室可以利用 IPv6 協定至  http://a.kmol.info:88  下載課程相關檔案. \n 下載  fall2020_cp.7z  壓縮檔案之後, 直接利用 7zip 解開壓縮, 然後在 64 位元 Windows 10 啟動 start.bat, 就可以直接在 SciTE 編輯器中解譯 Python 程式, 而且可以利用 pip 工具安裝所需的 Python 模組之後, 接下來必須: \n \n 了解如何自己建立與 fall2020_cp.7z 相同功能的可攜 Python 套件 \n 了解如何在可攜套件中加入 portablegit, sharex, putty 等工具, 並學習如何使用 \n 了解如何在 github 以 submodule (或不以 submodule) 建立 cmsimde 倉儲 \n 了解如何在近端維護 CMSiMDE 內容管理系統 \n \n for 重複迴圈的應用 \n 接下來要在頁面中插入 11 張圖, 希望寬度為 600 且 img 屬性加入 add_border. \n 第一張圖以手動方式插入後, 手動進入 html 編輯, 加入 class="add_border" 屬性後, 取得插入圖檔的 html 如下: \n <p><img class="add_border" height="342" src="./../images/1_cp_git_and_cmsimde.png" width="600"></p> \n 隨後的 10 張圖希望利用 Python 迴圈產生後再從 html 編輯插入. \n \n \n \n \n \n \n \n \n \n \n \n 上述利用迴圈插入具有規律的字串程式碼為: \n \'\'\'\n參考用的 html 字串為\n<p><img class="add_border" height="342" src="./../images/1_cp_git_and_cmsimde.png" width="600"></p>\n\'\'\'\nfirstSegment = \'\'\'<p><img class="add_border" height="342" src="./../images/\'\'\'\n\nsecondSegment = \'\'\'_cp_git_and_cmsimde.png" width="600"></p>\'\'\'\n\nfor i in range(2, 12):\n    print(firstSegment + str(i) + secondSegment) \n 其於 SciTE 編輯器執行畫面: \n \n 請問, 當成功以  https://localhost:9443 \xa0對 CMSiMDE 動態網站連線時出現以下畫面, 代表甚麼意思? \n \n 當我們成功完成 CMSiMDE 動態網站內容, 且利用\xa0 generate_pages 按鈕轉為靜態網站資料後, 要利用 git 指令新增提交退送時, 碰到以下問題: \n \n 接著配合畫面中的提示, 利用 git config 指令操作結束後, 接著嘗試以 git push 將改版資料推送到遠端, 結果又出現下列畫面: \n \n 根據提示, 以 git pull 拉下遠端與近端的差異資料後, 又出現下列畫面, 因為提示中拉下的資料與 Leo Editor 有關, 因此在命令列視窗中輸入 leo, 試著開啟 Leo Editor, 結果出現的小視窗無論如何操作都會落入重複迴圈, 於是在 y:\\home\\.leo 目錄中, 以 SciTE 編輯器建立一個 .leoID.txt 檔案, 內容為任何字串, 然後以 stop.bat 關閉可攜系統之後, 再以 start.bat 開啟系統, 終於能夠開啟 Leo Editor, 並利用 git push 將近端資料成功送到 github. \n \n \n 請問, git config --global 指令執行成功後, 這些設定會存在哪裡? \n 另外假如我們不是使用可攜程式套件而是使用電腦輔助設計室中電腦所安裝的 Python 以及 git, 但是卻想在其他用戶所存放的 git config identity 中, 提交屬於自己帳號下的 comment, 該如何操作? \n 上述的流程設定, 必須每一次推送時都輸入 github 所登錄的帳號與密碼, 假如在協同者面前輸入帳號密碼時, 其他人都一直盯著我的鍵盤看, 該如何是好? \n 上述在 git push 之前需要 git pull 的原因是甚麼? \n 上述 Leo Editor 啟動時, 為何會進入重複迴圈? \n CMSiMDE 是用甚麼程式語言建立的? \n CMSiMDE 為什麼有動態網站與靜態網站的設計? \n 假如每一班都配給一台 Ubuntu 20.04 的伺服器, 可以配置與 Windows 10 相同的程式環境嗎? 假如我使用 MacBook 筆電也可以嗎? \n', 'tags': '', 'url': 'W2.html'}, {'title': '程式語言', 'text': 'Python \n Python Official Documentation: \n https://docs.python.org/3/ \n Kaggle Hello Python: \n https://www.kaggle.com/colinmorris/hello-python \n Principles of Computation with Python: \n https://oli.cmu.edu/courses/principles-of-computation-with-python-open-free/ \n \n Javascript \n https://developer.mozilla.org/en-US/docs/Web/JavaScript \n Flutter \n https://developer.mozilla.org/en-US/docs/Web/JavaScript \n Lua \n https://www.lua.org/start.html   \n C \n https://bellard.org/tcc/   \n C++ \n https://gcc.gnu.org/   \n \n \n \n', 'tags': '', 'url': '程式語言.html'}, {'title': 'W3', 'text': 'Ｗ3 統整 W1 與 W2 教材內容至各學員個人網頁 \n Ｗ3 完成 亂數分組 ,\xa0 每班分成五組 \n 1a \n group 1  Repository:  40923102  | Site:  40923102 Repository:  40923103  | Site:  40923103 Repository:  40923117  | Site:  40923117 Repository:  40923119  | Site:  40923119 Repository:  40923123  | Site:  40923123 Repository:  40923127  | Site:  40923127 Repository:  40923131  | Site:  40923131 Repository:  40923133  | Site:  40923133 Repository:  40923141  | Site:  40923141 Repository:  40923144  | Site:  40923144 Repository:  40923148  | Site:  40923148 Repository:  40923149  | Site:  40923149  ============================== group 2  Repository:  40623219  | Site:  40623219 Repository:  40923101  | Site:  40923101 Repository:  40923104  | Site:  40923104 Repository:  40923107  | Site:  40923107 Repository:  40923115  | Site:  40923115 Repository:  40923124  | Site:  40923124 Repository:  40923125  | Site:  40923125 Repository:  40923136  | Site:  40923136 Repository:  40923142  | Site:  40923142 Repository:  40923151  | Site:  40923151 Repository:  40923152  | Site:  40923152  ============================== group 3  Repository:  40723154  | Site:  40723154 Repository:  40828127  | Site:  40828127 Repository:  40923106  | Site:  40923106 Repository:  40923108  | Site:  40923108 Repository:  40923118  | Site:  40923118 Repository:  40923120  | Site:  40923120 Repository:  40923126  | Site:  40923126 Repository:  40923128  | Site:  40923128 Repository:  40923138  | Site:  40923138 Repository:  40923145  | Site:  40923145 Repository:  40923150  | Site:  40923150  ============================== group 4  Repository:  40727216  | Site:  40727216 Repository:  40727219  | Site:  40727219 Repository:  40923113  | Site:  40923113 Repository:  40923114  | Site:  40923114 Repository:  40923116  | Site:  40923116 Repository:  40923121  | Site:  40923121 Repository:  40923129  | Site:  40923129 Repository:  40923137  | Site:  40923137 Repository:  40923140  | Site:  40923140 Repository:  40923146  | Site:  40923146 Repository:  40923147  | Site:  40923147  ============================== group 5  Repository:  40923105  | Site:  40923105 Repository:  40923109  | Site:  40923109 Repository:  40923110  | Site:  40923110 Repository:  40923111  | Site:  40923111 Repository:  40923122  | Site:  40923122 Repository:  40923130  | Site:  40923130 Repository:  40923134  | Site:  40923134 Repository:  40923135  | Site:  40923135 Repository:  40923139  | Site:  40923139 Repository:  40923143  | Site:  40923143 Repository:  40923153  | Site:  40923153 \n 1b \n group 1  Repository:  40823148  | Site:  40823148 Repository:  40923203  | Site:  40923203 Repository:  40923208  | Site:  40923208 Repository:  40923209  | Site:  40923209 Repository:  40923210  | Site:  40923210 Repository:  40923223  | Site:  40923223 Repository:  40923225  | Site:  40923225 Repository:  40923230  | Site:  40923230 Repository:  40923238  | Site:  40923238 Repository:  40923239  | Site:  40923239 Repository:  40923244  | Site:  40923244 Repository:  40923249  | Site:  40923249  ============================== group 2  Repository:  40523148  | Site:  40523148 Repository:  40923201  | Site:  40923201 Repository:  40923202  | Site:  40923202 Repository:  40923218  | Site:  40923218 Repository:  40923219  | Site:  40923219 Repository:  40923228  | Site:  40923228 Repository:  40923231  | Site:  40923231 Repository:  40923232  | Site:  40923232 Repository:  40923240  | Site:  40923240 Repository:  40923247  | Site:  40923247 Repository:  40923248  | Site:  40923248 Repository:  40923250  | Site:  40923250  ============================== group 3  Repository:  40823152  | Site:  40823152 Repository:  40923205  | Site:  40923205 Repository:  40923212  | Site:  40923212 Repository:  40923214  | Site:  40923214 Repository:  40923217  | Site:  40923217 Repository:  40923226  | Site:  40923226 Repository:  40923236  | Site:  40923236 Repository:  40923241  | Site:  40923241 Repository:  40923242  | Site:  40923242 Repository:  40923246  | Site:  40923246 Repository:  40923251  | Site:  40923251  ============================== group 4  Repository:  40723217  | Site:  40723217 Repository:  40728238  | Site:  40728238 Repository:  40923206  | Site:  40923206 Repository:  40923216  | Site:  40923216 Repository:  40923220  | Site:  40923220 Repository:  40923227  | Site:  40923227 Repository:  40923233  | Site:  40923233 Repository:  40923237  | Site:  40923237 Repository:  40923243  | Site:  40923243 Repository:  40923252  | Site:  40923252 Repository:  40923253  | Site:  40923253  ============================== group 5  Repository:  40523138  | Site:  40523138 Repository:  40923204  | Site:  40923204 Repository:  40923207  | Site:  40923207 Repository:  40923211  | Site:  40923211 Repository:  40923213  | Site:  40923213 Repository:  40923221  | Site:  40923221 Repository:  40923224  | Site:  40923224 Repository:  40923229  | Site:  40923229 Repository:  40923234  | Site:  40923234 Repository:  40923235  | Site:  40923235 Repository:  40923245  | Site:  40923245 \n unordered list: \n [[40823148, 40923203, 40923208, 40923209, 40923210, 40923223, 40923225, 40923230, 40923238, 40923239, 40923244, 40923249], [40523148, 40923201, 40923202, 40923218, 40923219, 40923228, 40923231, 40923232, 40923240, 40923247, 40923248, 40923250], [40823152, 40923205, 40923212, 40923214, 40923217, 40923226, 40923236, 40923241, 40923242, 40923246, 40923251], [40723217, 40728238, 40923206, 40923216, 40923220, 40923227, 40923233, 40923237, 40923243, 40923252, 40923253], [40523138, 40923204, 40923207, 40923211, 40923213, 40923221, 40923224, 40923229, 40923234, 40923235, 40923245]] \n', 'tags': '', 'url': 'W3.html'}, {'title': 'HW1', 'text': '有關作業一: \n 電腦能做什麼? 在充分了解與電腦硬體及軟體相關英文術語的涵義與功能之後, 就能體會現代人的知識學習已經離不開電腦與網路, 因為它們已經無所不在. \n 電腦與網路結合下的科技社會, 工程師扮演著透過創新設計建立新產品與服務的重要角色, 學會如何編寫程式與電腦溝通, 並透過網路通訊進行協同設計應該是工程師必備的專業技能. \n 各組員進行作業一之前, 必須先檢查是否已經有一個 USB 3.0 規格以上 64 GB 的隨身碟, 是否已經學會如何利用 CMSiMDE 管理自己的網站內容, 各組是否已經學會使用 meet 與 Youtube + OBS 進行每週的分組線上會議? \n 作業一 (Due. 各班第八週上課之前)： \n 請各組員至  https://oli.cmu.edu/product-category/computer-science-programming-indep/  以 @gm 電子郵箱登記帳號後, 分別閱讀 PC Hardware Unit 1-5\xa0與 https://oli.cmu.edu/product-category/computer-science-programming-indep/  教材內容, 各組員將所分配到的章節內容以英文及中文對照的方式, 配合電腦輔助設計室中的電腦與網路配置或操作心得, 將圖文與參考資料放入個人 cp2020 網頁, 之後再設法整合至各組分組網頁中 (由組長負責建立 cp2020ag1, a 為甲班, b 為乙班, g1 代表第一組). \n PC Hardware \n UNIT 1: Succeeding in PC Hardware  UNIT 2: Hardware Basics   PCH 1: The Basics  PCH 2: Procedures and Safety  PCH 3: Customer Relations UNIT 3: Hardware Components   PCH 4: Cases, Form Factors, and Power Supplies  PCH 5: Motherboards, Expansion Buses, and Processors  PCH 6: Memory and BIOS  PCH 7: Expansion Cards, Audio, Video, and Storage  PCH 8: Cooling UNIT 4: Networking and Internet   PCH 9: Networking Overview  PCH 10: Networking Hardware  PCH 11: Networking Media  PCH 12: Ethernet Standards  PCH 13: IPv4 and IPv6 Addresses  PCH 14: TCP and UDP Protocols  PCH 15: Introduction to Wireless Networking  PCH 16: Internet Connectivity UNIT 5: Notebooks and Laptops   PCH 17: Notebook Features and Components  PCH 18: Laptop and Notebook Component Replacement  PCH 19: Notebook Power and Physical Security \n PC Software \n UNIT 1: Succeeding in PC Software  UNIT 2: Windows Operating Systems   PCS 1: Windows Operating System  PCS 2: Installing Windows  PCS 3: Operating System Comparison  PCS 4: Other Operating Systems UNIT 3: Software Utilities   PCS 5: The Command Line  PCS 6: Task Manager  PCS 7: Disk Management  PCS 8: Introduction to Control Panel Utilities  PCS 9: Windows 10 Control Panel Utilities UNIT 4: Networking, Maintenance, and Security   PCS 10: Networking Setup  PCS 11: Preventative Maintenance  PCS 12: Security Settings  PCS 13: Virtualization  PCS 14: Prevention Methods  PCS 15: Threats and Practices  PCS 16: Data Destruction and Disposal  PCS 17: Wireless Networks  PCS 18: Wired Network Security  PCS 19: Malware UNIT 5: Mobile Systems   PCS 20: Mobile Operating Systems  PCS 21: Mobile Connectivity and Security  PCS 22: Mobile Hardware and Synchronization UNIT 6: Troubleshooting   PCS 23: Application of Troubleshooting Theory  PCS 24: Troubleshooting Wired Networks  PCS 25: Troubleshooting Wireless Networks  PCS 26: Troubleshooting Operating Systems  PCS 27: Troubleshooting Security Issues UNIT 7: Capstone   PCS 28: PC Software Capstone \n 作業二 (Due. 各班 第十週上課之前): \n 請各組採分工方式, 以英文及中文對照方式完成  https://www.practicepython.org/  中各題目的練習與資料整理, 請將圖文資料放入各分組組長的分組網頁中 (cp2020ag1 為甲班第一組倉儲名稱, 其餘類推), 並將分組網站連結回報至  https://gitter.im/mdecourse/cp2020 \n \n 1: \xa0 Character Input \xa0 \n 2: \xa0 Odd Or Even \xa0 \n 3: \xa0 List Less Than Ten \xa0 \xa0 \n 4: \xa0 Divisors \xa0 \xa0 \n 5: \xa0 List Overlap \xa0 \xa0 \n 6: \xa0 String Lists \xa0 \xa0 \n 7: \xa0 List Comprehensions \xa0 \xa0 \n 8: \xa0 Rock Paper Scissors \xa0 \xa0 \xa0 \n 9: \xa0 Guessing Game One \xa0 \xa0 \xa0 \n 10: \xa0 List Overlap Comprehensions \xa0 \xa0 \n 11: \xa0 Check Primality Functions \xa0 \xa0 \xa0 \n 12: \xa0 List Ends \xa0 \n 13: \xa0 Fibonacci \xa0 \xa0 \n 14: \xa0 List Remove Duplicates \xa0 \xa0 \n 15: \xa0 Reverse Word Order \xa0 \xa0 \xa0 \n 16: \xa0 Password Generator \xa0 \xa0 \xa0 \xa0 \n 17: \xa0 Decode A Web Page \xa0 \xa0 \xa0 \xa0 \n 18: \xa0 Cows And Bulls \xa0 \xa0 \xa0 \n 19: \xa0 Decode A Web Page Two \xa0 \xa0 \xa0 \xa0 \n 20: \xa0 Element Search \xa0 \n 21: \xa0 Write To A File \xa0 \n 22: \xa0 Read From File \xa0 \n 23: \xa0 File Overlap \xa0 \xa0 \n 24: \xa0 Draw A Game Board \xa0 \xa0 \n 25: \xa0 Guessing Game Two \xa0 \xa0 \xa0 \n 26: \xa0 Check Tic Tac Toe \xa0 \xa0 \n 27: \xa0 Tic Tac Toe Draw \xa0 \xa0 \n 28: \xa0 Max Of Three \xa0 \n 29: \xa0 Tic Tac Toe Game \xa0 \xa0 \xa0 \n 30: \xa0 Pick Word \xa0 \xa0 \n 31: \xa0 Guess Letters \xa0 \xa0 \n 32: \xa0 Hangman \xa0 \xa0 \n 33: \xa0 Birthday Dictionaries \xa0 \n 34: \xa0 Birthday Json \xa0 \xa0 \n 35: \xa0 Birthday Months \xa0 \xa0 \n 36: \xa0 Birthday Plots \xa0 \xa0 \xa0 \n \n 圖書館電子書選讀: \n Artificial Intelligence Basics: \n https://link.springer.com/book/10.1007/978-1-4842-5028-0 \xa0(2019) \n Neural Network and Deep Learning: \n https://link.springer.com/book/10.1007/978-3-319-94463-0 \xa0(2018) \n Computer Vision Metrics: \n https://link.springer.com/book/10.1007/978-3-319-33762-3 \xa0(2016) \n Genetic Algorithms: \n https://link.springer.com/book/10.1007/978-1-4471-0577-0 \xa0(1999) \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'W4-W9', 'text': 'Python 基本語法與功能 \n 參考電子書:  Python for everyone.py \n https://books.trinket.io/pfe/ \xa0 \n 線上 Python 教材:\xa0 https://github.com/mdecourse/course-reader \xa0 \n 利用  Wink3  建立電腦操作流程導引影片. 下載  Wink3.7z \n Python for everyone 章節: \n 1 Why should you learn to write programs? 1 1.1 Creativity and motivation . . . . . . . . . . . . . . . . . . . . . . . 2 1.2 Computer hardware architecture . . . . . . . . . . . . . . . . . . . 3 1.3 Understanding programming . . . . . . . . . . . . . . . . . . . . . 4 1.4 Words and sentences . . . . . . . . . . . . . . . . . . . . . . . . . . 5 1.5 Conversing with Python . . . . . . . . . . . . . . . . . . . . . . . . 6 1.6 Terminology: Interpreter and compiler . . . . . . . . . . . . . . . . 8 1.7 Writing a program . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 1.8 What is a program? . . . . . . . . . . . . . . . . . . . . . . . . . . 10 1.9 The building blocks of programs . . . . . . . . . . . . . . . . . . . . 11 1.10 What could possibly go wrong? . . . . . . . . . . . . . . . . . . . . 12 1.11 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 1.12 The learning journey . . . . . . . . . . . . . . . . . . . . . . . . . . 15 1.13 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 1.14 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 2 Variables, expressions, and statements 19 2.1 Values and types . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 2.2 Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 2.3 Variable names and keywords . . . . . . . . . . . . . . . . . . . . . . 21 2.4 Statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 2.5 Operators and operands . . . . . . . . . . . . . . . . . . . . . . . . 22 2.6 Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 2.7 Order of operations . . . . . . . . . . . . . . . . . . . . . . . . . . 23 2.8 Modulus operator . . . . . . . . . . . . . . . . . . . . . . . . . . . 24 2.9 String operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24 v vi CONTENTS 2.10 Asking the user for input . . . . . . . . . . . . . . . . . . . . . . . 25 2.11 Comments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 2.12 Choosing mnemonic variable names . . . . . . . . . . . . . . . . . 27 2.13 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 2.14 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 2.15 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30 3 Conditional execution 31 3.1 Boolean expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . 31 3.2 Logical operators . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32 3.3 Conditional execution . . . . . . . . . . . . . . . . . . . . . . . . . 32 3.4 Alternative execution . . . . . . . . . . . . . . . . . . . . . . . . . 33 3.5 Chained conditionals . . . . . . . . . . . . . . . . . . . . . . . . . . 34 3.6 Nested conditionals . . . . . . . . . . . . . . . . . . . . . . . . . . 35 3.7 Catching exceptions using try and except . . . . . . . . . . . . . . 36 3.8 Short-circuit evaluation of logical expressions . . . . . . . . . . . . 38 3.9 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 3.10 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 3.11 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40 4 Functions 43 4.1 Function calls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 4.2 Built-in functions . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 4.3 Type conversion functions . . . . . . . . . . . . . . . . . . . . . . . 44 4.4 Math functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45 4.5 Random numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 4.6 Adding new functions . . . . . . . . . . . . . . . . . . . . . . . . . 47 4.7 Deﬁnitions and uses . . . . . . . . . . . . . . . . . . . . . . . . . . 48 4.8 Flow of execution . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 4.9 Parameters and arguments . . . . . . . . . . . . . . . . . . . . . . 49 4.10 Fruitful functions and void functions . . . . . . . . . . . . . . . . . . 51 4.11 Why functions? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 4.12 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 4.13 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 4.14 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54 CONTENTS vii 5 Iteration 57 5.1 Updating variables . . . . . . . . . . . . . . . . . . . . . . . . . . . 57 5.2 The while statement . . . . . . . . . . . . . . . . . . . . . . . . . 57 5.3 Inﬁnite loops . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 5.4 Finishing iterations with continue . . . . . . . . . . . . . . . . . . 59 5.5 Deﬁnite loops using for . . . . . . . . . . . . . . . . . . . . . . . . 60 5.6 Loop patterns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 5.6.1 Counting and summing loops . . . . . . . . . . . . . . . . . . 61 5.6.2 Maximum and minimum loops . . . . . . . . . . . . . . . . 62 5.7 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 5.8 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 5.9 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 6 Strings 67 6.1 A string is a sequence . . . . . . . . . . . . . . . . . . . . . . . . . 67 6.2 Getting the length of a string using len . . . . . . . . . . . . . . . 68 6.3 Traversal through a string with a loop . . . . . . . . . . . . . . . . 68 6.4 String slices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69 6.5 Strings are immutable . . . . . . . . . . . . . . . . . . . . . . . . . 70 6.6 Looping and counting . . . . . . . . . . . . . . . . . . . . . . . . . 70 6.7 The in operator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71 6.8 String comparison . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71 6.9 String methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71 6.10 Parsing strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74 6.11 Format operator . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74 6.12 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 6.13 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 6.14 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77 7 Files 79 7.1 Persistence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79 7.2 Opening ﬁles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 7.3 Text ﬁles and lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81 7.4 Reading ﬁles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82 7.5 Searching through a ﬁle . . . . . . . . . . . . . . . . . . . . . . . . 83 viii CONTENTS 7.6 Letting the user choose the ﬁle name . . . . . . . . . . . . . . . . . 85 7.7 Using try, except, and open . . . . . . . . . . . . . . . . . . . . 86 7.8 Writing ﬁles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 7.9 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88 7.10 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89 7.11 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89 8 Lists 91 8.1 A list is a sequence . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91 8.2 Lists are mutable . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92 8.3 Traversing a list . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92 8.4 List operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93 8.5 List slices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94 8.6 List methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94 8.7 Deleting elements . . . . . . . . . . . . . . . . . . . . . . . . . . . 95 8.8 Lists and functions . . . . . . . . . . . . . . . . . . . . . . . . . . . 96 8.9 Lists and strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97 8.10 Parsing lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98 8.11 Objects and values . . . . . . . . . . . . . . . . . . . . . . . . . . . 99 8.12 Aliasing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100 8.13 List arguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100 8.14 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102 8.15 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105 8.16 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105 9 Dictionaries 107 9.1 Dictionary as a set of counters . . . . . . . . . . . . . . . . . . . . 109 9.2 Dictionaries and ﬁles . . . . . . . . . . . . . . . . . . . . . . . . . . 110 9.3 Looping and dictionaries . . . . . . . . . . . . . . . . . . . . . . . . 111 9.4 Advanced text parsing . . . . . . . . . . . . . . . . . . . . . . . . . 113 9.5 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114 9.6 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115 9.7 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115 CONTENTS ix 10 Tuples 117 10.1 Tuples are immutable . . . . . . . . . . . . . . . . . . . . . . . . . 117 10.2 Comparing tuples . . . . . . . . . . . . . . . . . . . . . . . . . . . 118 10.3 Tuple assignment . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120 10.4 Dictionaries and tuples . . . . . . . . . . . . . . . . . . . . . . . . . 121 10.5 Multiple assignment with dictionaries . . . . . . . . . . . . . . . . 122 10.6 The most common words . . . . . . . . . . . . . . . . . . . . . . . 123 10.7 Using tuples as keys in dictionaries . . . . . . . . . . . . . . . . . . 124 10.8 Sequences: strings, lists, and tuples - Oh My! . . . . . . . . . . . . 124 10.9 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125 10.10 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125 10.11 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126 11 Regular expressions 127 11.1 Character matching in regular expressions . . . . . . . . . . . . . . 128 11.2 Extracting data using regular expressions . . . . . . . . . . . . . . 129 11.3 Combining searching and extracting . . . . . . . . . . . . . . . . . 132 11.4 Escape character . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136 11.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136 11.6 Bonus section for Unix / Linux users . . . . . . . . . . . . . . . . . 137 11.7 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138 11.8 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138 11.9 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139 12 Networked programs 141 12.1 Hypertext Transfer Protocol - HTTP . . . . . . . . . . . . . . . . . 141 12.2 The world’s simplest web browser . . . . . . . . . . . . . . . . . . 142 12.3 Retrieving an image over HTTP . . . . . . . . . . . . . . . . . . . 144 12.4 Retrieving web pages with urllib . . . . . . . . . . . . . . . . . . 146 12.5 Reading binary ﬁles using urllib . . . . . . . . . . . . . . . . . . 147 12.6 Parsing HTML and scraping the web . . . . . . . . . . . . . . . . 148 12.7 Parsing HTML using regular expressions . . . . . . . . . . . . . . 148 12.8 Parsing HTML using BeautifulSoup . . . . . . . . . . . . . . . . . 150 12.9 Bonus section for Unix / Linux users . . . . . . . . . . . . . . . . . 153 12.10 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153 12.11 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154 x CONTENTS 13 Using Web Services 155 13.1 eXtensible Markup Language - XML . . . . . . . . . . . . . . . . . 155 13.2 Parsing XML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156 13.3 Looping through nodes . . . . . . . . . . . . . . . . . . . . . . . . 157 13.4 JavaScript Object Notation - JSON . . . . . . . . . . . . . . . . . 158 13.5 Parsing JSON . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159 13.6 Application Programming Interfaces . . . . . . . . . . . . . . . . . 160 13.7 Security and API usage . . . . . . . . . . . . . . . . . . . . . . . . . 161 13.8 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162 13.9 Application 1: Google geocoding web service . . . . . . . . . . . . 162 13.10 Application 2: Twitter . . . . . . . . . . . . . . . . . . . . . . . . . 166 14 Object-oriented programming 171 14.1 Managing larger programs . . . . . . . . . . . . . . . . . . . . . . . . 171 14.2 Getting started . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172 14.3 Using objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172 14.4 Starting with programs . . . . . . . . . . . . . . . . . . . . . . . . 173 14.5 Subdividing a problem . . . . . . . . . . . . . . . . . . . . . . . . . 175 14.6 Our ﬁrst Python object . . . . . . . . . . . . . . . . . . . . . . . . 175 14.7 Classes as types . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178 14.8 Object lifecycle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179 14.9 Multiple instances . . . . . . . . . . . . . . . . . . . . . . . . . . . 180 14.10 Inheritance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181 14.11 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182 14.12 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183 15 Using Databases and SQL 185 15.1 What is a database? . . . . . . . . . . . . . . . . . . . . . . . . . . 185 15.2 Database concepts . . . . . . . . . . . . . . . . . . . . . . . . . . . 185 15.3 Database Browser for SQLite . . . . . . . . . . . . . . . . . . . . . 186 15.4 Creating a database table . . . . . . . . . . . . . . . . . . . . . . . 186 15.5 Structured Query Language summary . . . . . . . . . . . . . . . . 189 15.6 Spidering Twitter using a database . . . . . . . . . . . . . . . . . . . 191 15.7 Basic data modeling . . . . . . . . . . . . . . . . . . . . . . . . . . 196 15.8 Programming with multiple tables . . . . . . . . . . . . . . . . . . 197 CONTENTS xi 15.8.1 Constraints in database tables . . . . . . . . . . . . . . . . 200 15.8.2 Retrieve and/or insert a record . . . . . . . . . . . . . . . . . 201 15.8.3 Storing the friend relationship . . . . . . . . . . . . . . . . . 202 15.9 Three kinds of keys . . . . . . . . . . . . . . . . . . . . . . . . . . 203 15.10 Using JOIN to retrieve data . . . . . . . . . . . . . . . . . . . . . . 204 15.11 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206 15.12 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207 15.13 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207 16 Visualizing data 209 16.1 Building a Google map from geocoded data . . . . . . . . . . . . . 209 16.2 Visualizing networks and interconnections . . . . . . . . . . . . . . . 211 16.3 Visualizing mail data . . . . . . . . . . . . . . . . . . . . . . . . . 214 A Contributions 221 A.1 Contributor List for Python for Everybody . . . . . . . . . . . . . . 221 A.2 Contributor List for Python for Informatics . . . . . . . . . . . . . . 221 A.3 Preface for “Think Python” . . . . . . . . . . . . . . . . . . . . . . . 221 A.3.1 The strange history of “Think Python” . . . . . . . . . . . . 221 A.3.2 Acknowledgements for “Think Python” . . . . . . . . . . . 223 A.4 Contributor List for “Think Python” . . . . . . . . . . . . . . . . . 223 \n CS 41: Hap.py Code \n Table of Contents \n \n Python Basics \n Data Structures \n Object-Oriented Python \n Functions \n Functional Programming \n Python and the Web \n Reading Python Documentation \n', 'tags': '', 'url': 'W4-W9.html'}, {'title': 'HW2', 'text': '有關作業二: \n 由於部分學員在建立 Github 帳號時, 無法使用學號登記帳號, 因此造成  W3  部分分組組員的倉儲與網站連結產生錯誤, 今已知乙班的原始分組數列如下: \n 一乙: \n [[40823148, 40923203, 40923208, 40923209, 40923210, 40923223, 40923225, 40923230, 40923238, 40923239, 40923244, 40923249], [40523148, 40923201, 40923202, 40923218, 40923219, 40923228, 40923231, 40923232, 40923240, 40923247, 40923248, 40923250], [40823152, 40923205, 40923212, 40923214, 40923217, 40923226, 40923236, 40923241, 40923242, 40923246, 40923251], [40723217, 40728238, 40923206, 40923216, 40923220, 40923227, 40923233, 40923237, 40923243, 40923252, 40923253], [40523138, 40923204, 40923207, 40923211, 40923213, 40923221, 40923224, 40923229, 40923234, 40923235, 40923245]] \n 但是一甲的分組數列當時並未能儲存. \n 另外, 從亂數分組頁面可以從 教務處伺服器與 Heroku  上的網站結合下取得兩班最終修課學員名單: \n 四技設一甲計算機程式學員名單: \n https://nfulist.herokuapp.com/?semester=1091&courseno=0762 \n 四技設一乙計算機程式學員名單: \n https://nfulist.herokuapp.com/?semester=1091&courseno=0776 \n 請各組以協同討論但各自將以下題目的解題流程說明與程式放入個人網頁的方式完成作業二. \n 作業二之一: \n 請問該如何取得與上述一乙相同格式的一甲分組數列? 請詳細說明解題步驟後列出一甲的分組數列. \n 作業二之二: \n 請問根據上述原始分組資料與最終教務處的選課學員名單, 兩班課程中是否有人加選或者退選? 請說明解題方法與結果. \n 作業二之三: \n 從倉儲  downloads/hw2  目錄中可以找到兩班各學員實際登記 Github 的帳號資料, 例如:  一乙學號與 Github 帳號對照表 , 請問該如何利用程式方法產生正確的\xa0 W3 \xa0網頁 html 資料? \n \n 參考資料: \n 變數:\xa0 https://books.trinket.io/pfe/02-variables.html \xa0 \n 條件式:\xa0 https://books.trinket.io/pfe/03-conditional.html \xa0 \n 重複迴圈:  https://books.trinket.io/pfe/05-iterations.html \xa0 \n 數列:\xa0 https://books.trinket.io/pfe/08-lists.html \xa0 \n 開啟檔案:  https://books.trinket.io/pfe/07-files.html\xa0 \n 超文件:\xa0 https://www.w3schools.com/html/ \xa0 \n bs4:\xa0 https://readthedocs.org/projects/beautiful-soup-4/downloads/pdf/latest/ \xa0', 'tags': '', 'url': 'HW2.html'}, {'title': 'W10-W14', 'text': '分組 Python 專案', 'tags': '', 'url': 'W10-W14.html'}, {'title': 'W15-W18', 'text': '分組總結報告 \n', 'tags': '', 'url': 'W15-W18.html'}, {'title': 'Python', 'text': 'Principles of Computation with Python: \n https://oli.cmu.edu/courses/principles-of-computation-with-python-open-free/ \n \n 請利用學校所配發的 @gm 電子郵件帳號登入  https://kaggle.com , 並且連結至  https://www.kaggle.com/learn/python  就可以開始 在  https://www.kaggle.com/notebooks  網際環境中學習 Python 程式語言. \n 例如: \n https://www.kaggle.com/kevinelong/introduction-to-computer-programming-review/execution \n https://www.kaggle.com/mdecourse/cp2020 \n https://www.kaggle.com/abinesh100/easy-download-images-in-25-lines-py3 \n 除了  https://kaggle.com  與  https://colab.research.google.com  執行並學習 Python 外, 本課程將要求學員在  Github Pages  與  Gitlab Pages  中建立個人靜態網頁, 並將網際動態 Python 系統部署在  Heroku,  分組協同報告則利用  Authorea  編輯發布. \n 其他學習 Python 的方式: \n \n 直接在操作系統中安裝 Python 解譯器與編輯器 \n 利用可攜程式系統中的 Python 解譯器與編輯器 \n 直接在網際環境中搭建 Brython 程式環境 \n 直接在網際環境中搭建 Jupyter Notebook 程式環境 \n \n 不同程式環境中的組態設定與功能差異 \n 其他參考教材: \n https://www.py4e.com/ \n https://automatetheboringstuff.com/ \n', 'tags': '', 'url': 'Python.html'}, {'title': '工作流程', 'text': '建立 CP 2020 課程網頁 \n \n 以 mdecourse 帳號登入 github.com \n 建立 cp2020 空倉儲, 選擇由系統建立 README.md (延伸題目: 假如不新 README.md, 則又該如何操作?） \n 在近端啟動隨身程式系統 (或者自行在操作系統安裝所需套件) \n 將遠端的 cp2020 倉儲 git clone 到近端 (延伸題目: git clone 是甚麼?) \n 利用 git submodule add 導入 cmsimde 當作目錄 \n 從近端 cmsimde 目錄中取出 up_dir 中的內容至 cp2020 倉儲根目錄 \n 在近端可以進入 cmsimde 目錄, 以 python wsgi.py 啟動動態網頁 (延伸題目: 何謂動態網頁? 有何功能?) \n 在近端編輯動態網頁內容後, 轉為靜態網頁 (如何轉?) \n 完成靜態網頁轉換之後, 利用近端 git 指令將新版本新增, 提交並推送到遠端 \n \n 在近端編寫第一個 Python 程式, 每修改一次都利用 git 進行提交, 修改並提交 4 次後, 可以在任何版本下回復到先前的任一版本內容. \n cphw1.7z \n i = 1\n\nprint(i) \n 進入 y:\\tmp\\cphw1 從 git init 開始 \n 每一次改版, i\xa0 增量 1 \n git add . \n git commit -m "i=1" \n git push \n Y:\\tmp\\cphw1>git log\ncommit cb568bc032bb4e4364c347b5b6225c7849450c5f (HEAD -> master)\nAuthor: mdecourse <mdecourse@gmail.com>\nDate:   Wed Aug 26 15:18:39 2020 +0800\n\n    i=4\n\ncommit d9ef5402c330aac9791a9cd20403ad583854ceb6\nAuthor: mdecourse <mdecourse@gmail.com>\nDate:   Wed Aug 26 15:18:19 2020 +0800\n\n    i=3\n\ncommit 4b40d3a60e7e37b7847d9fb70c3a0380ab20f9fe\nAuthor: mdecourse <mdecourse@gmail.com>\nDate:   Wed Aug 26 15:17:56 2020 +0800\n\n    i=2\n\ncommit 1852efb2003bd52c4baa27cc7f0c38b8faf55d14\nAuthor: mdecourse <mdecourse@gmail.com>\nDate:   Wed Aug 26 15:17:27 2020 +0800\n\n    i=1 \n 在近端使用電腦儲存檔案, 最理想的情況是要利用 git 或 Fossil SCM 等分散式版次管理套件, 將各版本的內容進行提交並註記改版緣由之後, 再從近端推送到遠端. \n 使用分散式版次管理的目的 \n 可以註記每次改版的提交者, 並能利用 git checkout 到先前的各版本 \n 資料存一份在遠端, 避免因為近端電腦損毀而丟失資料. \n \n', 'tags': '', 'url': '工作流程.html'}, {'title': '亂數分組', 'text': '亂數分組: \n semester=1091 \n courseno=0762 \n cp \n 1a 1091/0762 \n 1b 1091/0776 \n cad \n 2a 1091/0788 \n 2b 1091/0801 \n 學員名單 URL:   課程代號:      \n \n 四技設一甲計算機程式學員名單: \n https://nfulist.herokuapp.com/?semester=1091&courseno=0762 \n 四技設一乙計算機程式學員名單: \n https://nfulist.herokuapp.com/?semester=1091&courseno=0776 \n 部署至  Heroku  的原始碼:  https://github.com/mdecourse/nfulist \n 參考資料 \n get_student_list.py \n import \'dart:html\';\n  \n  InputElement studListUrl = querySelector("#studListUrl");\n  String studUrl;\n  InputElement courseName = querySelector("#courseName");\n  String cName;\n  // 將 Label 改為 Textarea, 避免產生過程結果嵌入所在頁面\n  TextAreaElement output = querySelector("#output");\n  \nmain() {\n  querySelector("#submit").onClick.listen((e) => grouping());\n}\n  \ngrouping() {\n  output.innerHtml = "";\n  \n  if (studListUrl.value != "") {\n    studUrl = studListUrl.value;\n  } else {\n    studUrl = \'https://nfulist.herokuapp.com\';\n  }\n  \n  if (courseName.value != "") {\n\tcName = courseName.value;\n  } else {\n\tcName = "cp2020";\n  }\n  \n  // 組序由 1 開始\n  int gth = 1;\n  // 迴圈序號變數\n  int i;\n  int j;\n  int total;\n  int inc;\n  // 每組學員暫存數列\n  var gpList = [];\n  // 全班分組數列\n  var group = [];\n  // 各組人數數列\n  var numList = [];\n  \n  HttpRequest.getString(studUrl).then((String resp) {\n    // 利用 trim() 去除字串最後的跳行符號, 之後再利用 split() 根據 \\n 轉為數列\n    var studList = resp.trim().split("\\n");\n    // 數列利用 shuffle() 方法以隨機方法弄亂順序\n    studList.shuffle();\n    total = studList.length;\n    output.text += "全班總計" + total.toString() + " 人\\n";\n    numList = getNumList(studList.length);\n    inc = 0;\n    for (i in numList){\n      // 列印區隔符號\n      output.text += \'=\' * 20 + "\\n";\n      output.text += "group $gth 有 " + i.toString() + " 人: \\n";\n      gpList = [];\n      for (j = 0; j < i; j++){\n        output.text += studList[j+inc] + "\\n";\n        // 在各分組數列中加入將對應的學員學號\n        gpList.add(studList[j+inc]);\n      }\n      gth = gth + 1;\n      inc = inc + j;\n        //output.text += studList[j] + "\\n";\n        // 逐步將各組暫存的分組數列加入全班分組數列中\n      gpList.sort();\n      group.add(gpList);\n    }\n    // 列出全班分組數列\n    output.text += group.toString() + "\\n";\n    // 列出已經排序後的分組名單\n    output.text += \'=\' * 25 + "\\n";\n    output.text += \'以下為排序後的各組成員名單: \\n\';\n    gth = 1;\n    /*\n    404231\n    s4052\n    4062\n    s4072\n    4082\n    5072\n    5083\n    */\n    // 先列出純文字以 \\n 跳行組員資料\n    for (i=0; i < group.length; i++){\n      // 列印區隔符號\n      output.text += \'=\' * 20 + "\\n";\n      output.text += "group $gth \\n";\n      gpList = [];\n      for (j=0; j < group[i].length; j++){\n        output.text += group[i][j] + "\\n";\n      }\n      gth = gth + 1;\n    }\n     \n    gth = 1;\n    // 最後列出超文件以 <br\\> 跳行組員資料, 包含倉儲與網站\n    for (i=0; i < group.length; i++){\n      // 列印區隔符號\n      output.text += \'\\n\' + \'=\' * 30 + "<br \\>";\n      output.text += "group $gth <br \\>";\n      gpList = [];\n      for (j=0; j < group[i].length; j++){\n          if (group[i][j].startsWith(\'4052\') || group[i][j].startsWith(\'4072\')) {\n              output.text += "Repository: <a href=\'https://github.com/s" + \n                                      group[i][j] + "/" + cName + "\'>" + group[i][j] + \n                                      "</a>" + " | Site: <a href=\'https://s" + group[i][j] + \n                                      ".github.io/" + cName + "\'>" + group[i][j] + \n                                      "</a><br \\>";\n          }\n          else {\n              output.text += "Repository: <a href=\'https://github.com/" + \n                                      group[i][j] + "/" + cName +"\'>" + group[i][j] + \n                                      "</a>" + " | Site: <a href=\'https://" + group[i][j] + \n                                      ".github.io/" + cName + "\'>" + group[i][j] + \n                                      "</a><br \\>";\n          }\n      }\n      gth = gth + 1;\n    }\n  });\n}\n  \nList getNumList(int total){\n  // total student number\n  // int total = 65;\n  // initial each group expect to be "eachGrp" number of people\n  int eachGrp = 10;\n  // may divide into "grpNum" number of group\n  int grpNum = total ~/ eachGrp;\n  // vacant list\n  var splits = [];\n  // find remainder when total number divid into "grpNum" number of group\n  int remainder = total % grpNum;\n  // number of people in one group by calculation\n  int calGrp = total ~/ grpNum;\n  \n  for (int i = 0; i < grpNum; i++) {\n    splits.add(calGrp);\n  }\n  //print(splits);\n  \n  for (int i = 0; i < remainder; i++) {\n    splits[i] += 1;\n  }\n  //print(splits);\n  return splits;\n } \n index.html \n <h4>亂數分組:</h4>\n學員名單 URL: <input type="text" id="studListUrl" size="60" value="https://nfulist.herokuapp.com"><br />\n課程代號: <input type="text" id="courseName" size="15" value="cp2020"><br />\n<input type="submit" value="開始分組" id="submit"><br />\n<textarea id="output" cols="80" rows="10"></textarea> \n style.css \n body {\n  color: white;\n  font-size: 20px;\n}\n \ninput, select, textarea {\nfont-size: 100%;\n} \n even_grouping.py \n import random\nimport requests\n  \n# getNumList 主要在每組最低人數下, 將不足 10 人的分組\n# 平均分配至各組\ndef getNumList(total, eachGrp=10):\n    # total is the number of students\n    # each group at least 10 students\n    #eachGrp = 10;\n    # may divide into "grpNum" number of group\n    grpNum = total // eachGrp;\n    # check grpNum\n    #print(grpNum)\n    # vacan list\n    splits = []\n    # find remainder when total number divid into "grpNum" number of group\n    remainder = total % grpNum\n    # number of people in one group by calculation\n    calGrp = total // grpNum\n      \n    for i in range(grpNum):\n        splits.append(calGrp)\n          \n    # check first splits\n    #print(splits)\n    \n    for i in range(remainder):\n        splits[i] += 1\n      \n    # check final splits\n    #print(splits);\n    return splits;\n  \n# 儲存學生名單資料的 url\ntarget_url = "http://mde.tw/cp2020/downloads/get_student_list/2020spring_cd_2a_list.txt"\n# 利用 requests 讀取 url 中的資料\nf = requests.get(target_url)\n# get student list from target_url\n# 利用 splitlines() 將資料放入數列 studList\nstudList = f.text.splitlines()\n# 每組預計分組的最低人數\nnum_in_one_group = 10\n# 每組學員暫存數列\ngpList = []\n# 全班分組數列\ngroup = []\n# 各組人數數列\nnumList = []\n# get numList\nnumList = getNumList(len(studList), num_in_one_group)\n# check numList\n# 列出已經補齊的各組人數數列\nprint("預計各組人數數列:" + str(numList))\n  \noutput = ""\ngth = 1\ninc = 0\n  \n# 弄亂 studList\nrandom.shuffle(studList)\noutput += "以下為尚未排序前的各組學員學號: \\n"\nfor i in numList:\n    # 列印區隔符號\n    output += \'=\' * 20 + "\\n";\n    output += "group " + str(gth) + " 有 " + str(i) + " 人: \\n"\n    # 每組學員暫存數列, 在此 reset\n    gpList = []\n    for j in range(i):\n        output += studList[j+inc] + "\\n"\n        # 在各分組數列中加入將對應的學員學號\n        gpList.append(studList[j+inc])\n        \n    gth = gth + 1\n    inc = inc + j\n    # 將各組學員數列依照學號排序\n    gpList.sort()\n    group.append(gpList)\n  \n# 列出尚未排序前的分組結果\nprint(output)\n# 列出已經完成排序的分組數列\nprint("已經排序後的分組數列:" + str(group))\n  \noutput = ""\n# 列出已經排序後的分組名單\noutput += \'=\' * 25 + "\\n"\noutput += \'以下為排序後的各組成員名單:\\n\'\ngth = 1\n  \n# 先列出純文字以 \\n 跳行組員資料\nfor i in range(len(group)):\n    # 列印區隔符號\n    output += \'=\' * 20 + "\\n"\n    output += "group" + str(gth) + "\\n"\n    gpList = []\n      \n    for j in range(len(group[i])):\n        output += str(group[i][j]) + "\\n"\n        \n    gth = gth + 1\n      \nprint(output) \n 使用 Brython \n http://mde.tw/lab/content/Python.html \n # 利用 Brython 內建的 open 開啟 url 後, 以 read() 將資料取出\noutput = open(\'http://mde.tw/cp2020/downloads/get_student_list/2020spring_cd_2a_list.txt\').read()\n# 利用 print  將 output 資料列出\nprint(output) \n', 'tags': '', 'url': '亂數分組.html'}, {'title': 'Kaggle', 'text': '請注意, 登入 Kaggle 時請使用學校配發的 @gm 帳號, 當程式在 Kaggle 執行時, 若需使用 GPU 或 Internet 資源時, 必須使用手機號碼進行驗證, 而每一個手機號碼只能驗證一個 Kaggle 帳號. \n https://www.kaggle.com/mdecourse/cp2020\xa0 \n https://www.kaggle.com/mdecourse/ml2020 \xa0 \n https://di2.io/2019/03/is-kaggle-suitable-to-teach-programming-with-python/ \n https://fayz.in/stories/s/1417/0/?ckt_id=ZGL1ZGVk&title=Importance_of_github_kaggle \n https://www.programmersought.com/article/92261138300/ \n https://towardsdatascience.com/kaggle-for-beginners-getting-started-75decb43c0c0 \n Reference \n https://awesomeopensource.com/project/apachecn/Interview \n https://awesomeopensource.com/project/girls-in-ai/Girls-In-AI \n https://awesomeopensource.com/project/Mikoto10032/DeepLearning \n https://awesomeopensource.com/project/ypwhs/dogs_vs_cats \n', 'tags': '', 'url': 'Kaggle.html'}, {'title': 'Flask-Flutter', 'text': 'https://medium.com/@pyzimos/flutter-chatbot-with-python-flask-backend-heroku-deployment-706baafbb8f1 \n https://heartbeat.fritz.ai/digit-recognizer-with-flutter-and-tensorflow-lite-33f5145b5f32 \n \n', 'tags': '', 'url': 'Flask-Flutter.html'}, {'title': 'cmsimde', 'text': '在  https://github.com/mdecourse/cmsimde \xa0專案中, Flask 網際程式被用來建立動態內容管理系統, 並結合 bs4 與 lxml 模組功能, 將動態網頁轉為靜態網頁, 使用者可以將靜態網頁部署在 Github Pages 或 Heroku. 而靜態網頁可以再結合 Leo Editor 大綱管理程式, 用於整合 pelian 網誌與 reveal.js 網際簡報系統. \n', 'tags': '', 'url': 'cmsimde.html'}, {'title': 'pdf-project', 'text': 'https://github.com/mdecourse/cd2020pj1 \xa0 \n 功能包括: \n 透過 authomatic 模組讓使用者以 oauth2 模式登入 \n \n 接受 pdf 檔案上傳至 Google Drive \n 可讓使用者直接在線上合併 pdfs 檔案或分割鎖上傳的 pdf 檔案 \n \n', 'tags': '', 'url': 'pdf-project.html'}, {'title': 'nfu-project', 'text': 'https://github.com/mdecourse/nfulist \n 與  https://nfulist.herokuapp.com \xa0網站資料同步 \n https://nfulist.herokuapp.com/?semester=1082&courseno=0767 \n heroku login \n add _netrc to home \n git add . \n git commit -m "message" \n git push heroku master \n git remote add github  https://github.com/mdecourse/nfulist.git \n git push github master \n cp \n 1a 1091/0762 \n 1b 1091/0776 \n cad \n 2a 1091/0788 \n 2b 1091/0801 \n cd 2a 1082/0767 2b 1082/0780   2a 1072/0777 2b 1072/0790 2a 1062/0788 2a 1062/0802   wcm 1082/0744   1072/0754 1062/0765   wcmj 1082/2418 \n \n Brython \n https://github.com/BrythonServer/brython-server \n https://mdecp2018.github.io/finalproject-bgx \n', 'tags': '', 'url': 'nfu-project.html'}, {'title': 'Heroku', 'text': 'Heroku 與計算機程式 \n https://www.heroku.com/ \xa0是提供雲端應用程式服務的網站, 在計算機程式課程中, 可以透過 Heroku 內建伺服 PHP 的功能, 將 CMSiMDE 系統的靜態網站送到 Heroku 進行伺服, 也可以設法利用 Heroku 執行 CMSiMDE 的動態網站, 只是根據 Heroku 系統的規定, 每 24 小時雲端主機重啟之後, 非以 Git 提交推送的資料將會被 reset. \n 因此在未設定 persistent 資料儲存方案的 Heroku 應用, 只適合配置用於直接查詢會轉介其他系統資料的網際 Python 應用. \n Heroku 應用 \n 以下將列出在計算機程式課程中的三種 Heroku 應用: \n \n 將 CMSiMDE 的靜態網頁送到 Heroku 伺服 \n 利用 Heroku 配置 Webster 與 Wordnet 字典查詢服務 (透過 SQLite 資料庫) \n 利用 Heroku 上的 Flask 網際 ajax 程式, 從學校教務伺服器中取出課程相關資料 \n \n Heroku 示範倉儲與主機 \n https://github.com/mdecourse/scrum1-cmsimde \n https://scrum1-cmsimde.herokuapp.com \xa0 \n https://github.com/mdecourse/lookupdict \n https://lookupdict.herokuapp.com \xa0 \n https://github.com/mdecourse/nfulist \n https://nfulist.herokuapp.com \xa0 \n https://github.com/mdecourse/scrum1-2020cp1 \n http://scrum1-2020cp1.herokuapp.com/ \n Heroku 操作 \n 登入 @gm  下載 Heroku cli 可攜.7z , 解開壓縮檔案後, 在 start.bat 中將 Heroku bin 設定指令搜尋路徑, 重新啟動後, 以 heroku version 確定指令可以正常執行後, heroku login 成功後, 登入帳號密碼會存入 home/_netrc 中. 之後便可直接透過 heroku cli 指令直接對遠端主機下命令. \n', 'tags': '', 'url': 'Heroku.html'}, {'title': 'Machine\xa0Learning', 'text': 'https://www.kaggle.com/learn/deep-learning \n https://github.com/IKMLab/course_material \xa0 \n https://mropengate.blogspot.com/2019/03/ai-ai.html \xa0 \n', 'tags': '', 'url': 'Machine\xa0Learning.html'}, {'title': 'Projects', 'text': 'MCAD \n 雲端電腦輔助機械設計工具的比較 \n https://total3dprinting.org/onshape-vs-fusion-360/ \xa0是電腦輔助設計實習與協同產品設計實習課程中的議題之一, 比較 onshape 與 fusion 360 的功能與特性. \n 利用 Python 建立雲端程式工具 \n 結合 Brython, Javascript Gist 與近端程式系統, 利用 Flask 為主體, 建立一個能夠部署在 Heroku 的 Python 網際程式編寫與執行系統. \n 參考:\xa0 http://mde.tw/lab/content/Python.html \n 原先的系統是直接將導引給 Brython 執行的 Python 程式, 直接寫在網頁中, 然後透過 Javascript 與 html 按鈕逐一帶出已經編寫存入網頁的程式, 然後修改執行. \n 假如, 能夠使用\xa0 http://mde.tw/lab/content/Javascript.html \xa0與\xa0 http://mde.tw/lab/content/Dart.html \xa0中的方法, 將 Python 程式存於 Gist 或 Github Pages 網站, 然後透過 ajax 的方式帶至網際瀏覽器中執行, 並能利用 Javascript 按鈕將在網頁編寫執行的 Python 程式存至近端, 放入特定倉儲中進行版次管理. \n 網際 Markdown 網誌系統 \n 利用 Flask 與 GMail oauth2 登入後, 使用者在瀏覽器中編輯 Markdown 格式之 Pelican 網誌文章, 存為唯一檔案名.md 後上傳至 GDrive 特定目錄, 可再透過 Google Blogger API 將 Markdown 轉為 html 後登錄至 Google Blogger. \n 最終將 Flask 程式部署在 Heroku, 僅提供特定使用者利用 Gmail 帳號登入後編寫文章, 並分別對 Blogger 發表文章, 以及將 Markdown 文章上傳至 GDrive 備用. \n 使用工具: Flask, Google GMail oauth2, GDrive API, Google Blogger API \n https://github.com/tomzaragoza/Flask-LiteCMS \n OpenStreetMap 應用 \n https://en.wikipedia.org/wiki/OpenStreetMap \xa0 \n https://www.openstreetmap.org/ \xa0 \n https://osmbuildings.org/ \xa0 \n https://github.com/osmlab/labuildings \n 綜一館 \xa0( ntu ,\xa0 mit ,  berlin ) \n https://github.com/dabreegster/abstreet \xa0 \n https://ardupilot.org/dev/docs/sitl-with-webots.html \xa0 \n https://github.com/mdecourse/osm-python-tools \xa0 \n https://github.com/iandees/planet-notes-dump \xa0 \n https://planet.openstreetmap.org/ \xa0 \n https://github.com/openstreetmap/iD \xa0 \n https://github.com/osmlab/awesome-openstreetmap \xa0 \n https://github.com/Project-OSRM/osrm-backend \xa0 \n https://github.com/hotosm/osm-export-tool-python \xa0 \n https://wiki.openstreetmap.org/wiki/San_Francisco_Building_Height_Import \xa0 \n https://github.com/osmlab/labuildings \xa0 \n https://extract.bbbike.org/ \xa0 \n https://wiki.openstreetmap.org/wiki/San_Francisco_Building_Height_Import \xa0 \n https://en.wikipedia.org/wiki/Lidar \xa0 \n https://techcrunch.com/2019/08/02/digitizing-construction-sites-with-scaled-robotics/ \xa0 \n \n 圖形介面程式開發 \n Beginning PyQt  終於出書, 之前  PyQt5  曾被用來開發平面機構分析與合成套件 -  Pyslvs-UI , 接下來  PyQt5  或  Qt for Python  還能用來開發甚麼機械設計相關工具套件? \n Discourse 論壇與  Pydiscourse \n https://forum.eng.nfu.edu.tw/ \xa0以 Ruby 編寫, 若能透過  Pydiscourse  與\xa0 https://docs.discourse.org/ \xa0中的 Discourse API 結合, 將可延伸\xa0 http://lab.mde.tw/blog/sync-pelican-and-blogger-content.html \xa0中的 Markdown 文章, 在 Leo Editor  的編輯下, 將內容同步至  Pelican  與  Blogger  網誌.', 'tags': '', 'url': 'Projects.html'}]};